//
//   PACMAN
//   Ejemplo de cosas que se pueden hacer con XU
//   version 1.2
//

#use matrix,math,string

#define KUP       5
#define KDOWN     24
#define KLEFT     19
#define KRIGHT    4
#define KESCAPE   27

vars:
 /* LABERINTO, PUNTOS Y GENERAL */
  dots:=^number   // matriz de puntos para comer
  {dot,             // utilitaria
   numDots,         // total de puntos del laberinto
   totDots}:=number  // puntos consumidos.
//  LIMITG:=number    // retardo de cada loop del juego. regula la velocidad
  pofd:=^number   // matriz de puntos de decision de fantasmas
  lab:=^string    // laberinto
  score,vidas,record,timevida:=number
  sw_vidas,sw_msgvida:=boolean     // para dar un extra a los 10 mil, y a los 20 mil
  LIMITVIDAS:=number      // define el limite de 10 mil y luego 20 mil
  colorLAB,cntLAB,i:=number // define color y conteo de etapas para cambiar color
  paLAB,probLim:=^number          // paleta de colores de laberinto
  {puertaVidas,puertaPremio}:=boolean
  cntPuntos:=number
  sw_cambiaColor:=boolean
  sw_intermit:=^boolean
  etapa,indLimit:=number     // marca la etapa donde los fantasmas se pondrán maricones.
  sw_etapa:=switch
  PID:=string 
  swWaka:=boolean
  PIDWAKA,PIDPILLS:=string
  nWaka,nPills:=number

 /* PUERTA DIMENSIONAL */
  timeDimension:=number
  sw_dimension:=boolean

 /* PACMAN */
  c,Px,Py:=number  // accion Pacman
//  LIMITP:=number   // velocidad de PACMAN en microsegundos
  mPx,mPy:=number  // posicion de Pacman en matriz
  estadoBoca:=boolean       // true=abierta; false=cerrada
  boca:=string         // hacia donde apunta
  retardoP:=number
  sw:=boolean
  colorPacman:=number
  pdireccion:=string // direccion posible
  direccion:=string  /* indica direccion de Pacman, por si movimiento
                                   no es valido, o si no se ha apretado ninguna
                                   tecla: sigue en esa direccion */

 /* FANTASMAS */
  fprobabilidad:=^number       // probabilidad de persecucion pacman
                               // cuando se llega a cierto limite de puntos comidos,
                               // dicha probabilidad cambia, volviendo a los fantasmas
                               // más agresivos
  indexF,fpos:=number        // indice de array Fantasmas y posicion temporal
  Fcolor,Bcolor,tmpcolor,tmpBcolor:=^number         // color de cada fantasma
//  Frecupera:=^number      // los que fueron comidos y hay que reinicializarlos
  FANx,FANy,Fx,Fy:=^number  // posicion fisica y virtual de los fantasmas
  fdireccion,fantasma:=^string   // marca la direccion de cada fantasma, y los fantasmas
  fdir:=string
  fprob,limiteMariconazo,TIEMPOAZUL,tmpRET:=number
  Fpuntos:=^number   // puntos que otorga un fantasma al ser comido
  pdecision:=string
  retardoF:=number
  timeAZUL:=number    // tiempo de vulnerabilidad en segundos
  sw_death:=boolean
  sw_azul:=boolean    // cuando pacman come pastilla de poder, fantasmas no pueden comer
  festado:=^boolean   // estado activo/inactivo

 /* PASTILLAS */
  indexP:=number
  PASx,PASy:=^number
  POTENCIA:=number   // aumenta la velocidad de pacman
      retardoPAS,Pi,tipoLab:=number
      PASl:=^boolean
      sw_pastilla:=boolean

 /* hueá para comer */
  sw_puntos,sw_pichula:=boolean  // activa el tiempo de la hueá
  time,hPremio:=number           // tiempo que tiene Pacman para comerse la hueá
  hPuntos,colorFruta:=^number

  frutas:=^string
  indFruta,mulFruta:=number

  RETARDOF,RETARDOP:=number
  PATHs,PATH,cSYS,cPLAY:=string    // ruta de raíz de XU donde estan los datos de Pacman.

functions:

  mueveFantasma(indexF:number,tope:number):void
    Fcolor,Bcolor:=^number
    i:=number
  begin:
     use(Fcolor); drop; push{79,63,95,111}
     Bcolor<-^[4,3,5,6]
     
     i<-3
     do
       at(24 i); color([Bcolor indexF]);."▄";color([Fcolor indexF]);write chr(236);color([Bcolor indexF]);."▄"
       millisec(60)
       color(0)
       at(24 i); write "▄",chr(236),"▄"
     until (++i)>30
     
     i<-24
     do
       at(i 30); color([Bcolor indexF]);."▄";color([Fcolor indexF]);write chr(236);color([Bcolor indexF]);."▄"
       millisec(100)
       color(0)
       at( i 30); write "▄",chr(236),"▄"
     until (--i)<tope
     at(i 30); color([Bcolor indexF]);."▄";color([Fcolor indexF]);write chr(236);color([Bcolor indexF]);."▄"
     millisec(700)
  end

  poneAzules():void
    i:=number
  begin:
    for i<-19 to 22
       at(i 30); color(1);."▄";color(31);write chr(236);color(1);."▄"
    next
  end
  
  muevePacman():void
    i:=number
    sw:=boolean
  begin:
    sw<-true
    for i<-66 downto 30
       if sw
          at(25 i); color(14); ."(>) "
          sw<-false
       else
          at(25 i); color(14); ."(-) "
          sw<-true
       endif
       millisec(80)
    next
    .poneAzules()
  end
  
  subeycome():void
    i:=number
  begin:
    sw<-true
    for i<-25 downto 19
          at(i 30); color(14); ."(|)"
          at((i+1) 30); color(0); ."(V)"
       millisec(100)
       if i=22
          at(22 36);color(15);."   400 pts.                      "
          millisec(800)
          at(i 30); color(14); ."(V)"
       elseif i=21
          at(21 36);color(15);."   800 pts.                      "
          millisec(800)
          at(i 30); color(14); ."(V)"
       elseif i=20
          at(20 36);color(15);."  1200 pts.                      "
          millisec(800)
          at(i 30); color(14); ."(V)"
       elseif i=19
          at(19 36);color(15);."  1600 pts.                      "
          millisec(800)
       endif
       millisec(50)
    next
  end
  
   //titulo:=function:void
   titulo():void
     tit:=^string
     i:=number
   begin:
//     tit<-strload(PATH+"pacmanTitulo.txt")/"\n"
     
     video(30 88)
     cls
     
     at(2 1);."\n"
     color(14);
     ."  ███████▄▄      ▄█▄          ▄▄██▄▄   █▄          ▄█         ▄█▄         █▄      ████\n"
     ."  ██████████▄   █████      ▄█████████▄ ███        ███        █████        ███     ████\n"
     ."  ██████████▀ ▄███████▄   ▄█████▀▀▀    ████▄    ▄████      ▄███████▄      ████▄   ████\n"
     ."  ███████▀▀  ███████████  ▀█████▄▄▄    ██████  ██████     ███████████     ██████  ████\n"
     ."  ████     ▄██████ ██████▄ ▀█████████▀ ████████████ █   ▄██████ ██████▄   ███████▄██ █\n"
     ."  ████   ▄█████████████████▄  ▀▀██▀▀   █████████▄▄▄▄█ ▄█████████████████▄ ████████▄▄▄█\n"
     
     
     ."\n\n"
     color(15); ."\t\t\tFlechas de cursor = mueves el Pacman\n\n"
     ."\t\t\t\t\t"+chr(250)+"   = 10 pts.\n\t\t\t\t\to   = 250 pts. (pastillas de poder)\n\t\t\t\t\t";color(12);."O"
     color(14);."^";color(12);."O";color(15);." = ???? Misterio\n"
     color(138);."\n\t\t\t"+chr(250)*3+" 1UP Extra a los 10.000 y 20.000 pts "+chr(250)*3+"\n\n"
     .mueveFantasma(1 20)
     color(15);." = BLINKY (el cazador)"
     .mueveFantasma(2 21)
     color(15);." = INKY   (cambia de humor)"
     .mueveFantasma(3 22)
     color(15);." = PINKY  (embosca)"
     .mueveFantasma(4 23)
     color(15);." = CLYDE  (finge ignorancia)"
//     color(7);."\t\t\tFantasmas:\n\t\t\t\t"
//     sleep(1);color(12);."# = Blinky   ";
//     sleep(1);color(11);."@ = Inky\n\t\t\t\t"
//     sleep(1);color(13);."$ = Pinky    "
//     sleep(1);color(6); ."% = Clyde\n"
//     color(7);."\t\t\tStarring:";sleep(1);color(14);." PACMAN"; color(14); sleep(1);." > (esto es el pacman!!)"
     sleep(1)
     at(25 30); color(142);."o";color(15);."        STARRING"
     sleep(1)
     .muevePacman()
     at(25 36);color(14);."P A C M A N"
     millisec(500)
     .subeycome()
     sleep(1)
   end

   cargaLaberinto:=function:void
   begin:
     if tipoLab=1
        lab<-strload(PATH+"pacmanLab01.txt")/"\n"
     elseif tipoLab=2
        lab<-strload(PATH+"pacmanLab02.txt")/"\n"
     elseif tipoLab=3
        lab<-strload(PATH+"pacmanLab03.txt")/"\n"
     elseif tipoLab=4
        lab<-strload(PATH+"pacmanLab04.txt")/"\n"
     elseif tipoLab=5
        lab<-strload(PATH+"pacmanLab05.txt")/"\n"
/*     elseif tipoLab=6
        lab<-strload(PATH+"pacmanLab6.txt")/"\n"*/
     endif
   end

   cargaMatrizDecision:=function:void
   begin:
   //(flag ",")
     if tipoLab=1
        mat.load( pofd PATH+"pacmanPofD01.txt")
     elseif tipoLab=2
        mat.load( pofd PATH+"pacmanPofD02.txt")
     elseif tipoLab=3
        mat.load( pofd PATH+"pacmanPofD03.txt")
     elseif tipoLab=4
        mat.load( pofd PATH+"pacmanPofD04.txt")
     elseif tipoLab=5
        mat.load( pofd PATH+"pacmanPofD05.txt")
/*     elseif tipoLab=6
        mat.load( pofd PATH+"pacmanPofD6.txt")*/
     endif
   end

   cargaPuntos:=function:void
   begin:
//     tipoLab<-6
     if tipoLab=1
        mat.load(dots PATH+"pacmanDots01.txt") // tot=258
     elseif tipoLab=2
        mat.load(dots PATH+"pacmanDots02.txt") // 237
     elseif tipoLab=3
        mat.load(dots PATH+"pacmanDots03.txt") // 225
     elseif tipoLab=4
        mat.load(dots PATH+"pacmanDots04.txt") // 267
     elseif tipoLab=5
        mat.load(dots PATH+"pacmanDots05.txt") // 219
  /*   elseif tipoLab=6
        mat.load(dots PATH+"pacmanDots6.txt") //256
        */
     endif
     numDots<-[[@ [\ dots "=" 1]] 2]+4  /* incluidas pastillas de poder */
//     at(10 10);color(31);write numDots
//     goodbye
   end

   cargaScore:=function:void
   begin:
     record<-(#strload(PATH+"score.txt"))
   end

   muestraLaberinto:=function:void
     i,n:=number
     colorLab:=$1:number
   begin:
     at(1 0); color(colorLab)  // 18
     n<-[[@lab] 2]
     for i<-1 to n
       write "\t"+[lab i]+"\n"
     next
   end

   muestraPuntos:=function:void
     i,j,n:=number     // for
     lposx,lposy:=number  // puntos
   begin:
     lposx<-1
     if colorLAB=6
        color(12)
     elseif colorLAB=10
        color(15)
     else
        color(14)
     endif
     n<-[[@dots] 3] + 7
     for i<-1 to 29    // filas respecto al laberinto
       lposy<-1
       for j<-8 to n  // columnas respecto al lab.
         dot<-[.dots lposx lposy]
         at(i j)
         write chr(111), if dot=2
         write chr(250), if dot=1
         ++lposy
       next
       ++lposx
     next
   end

   poneGetReady(main:boolean):void
   begin:
     at(17 29); write (color(10)) "READY!"
   
     if main
         cmd(PATHs+"pacman_beginning.wav  </dev/null >/dev/null 2>&1") // funciona para mac
     else
        sleep(2)
     endif
    // sleep(3)
     at(17 29); write (color(0)) "READY!"
   end

   poneFinal:=function:void
   begin:
     at(17 27); write (color(10)) "GAME OVER"
     sleep(4)
     at(17 27); write (color(0)) "GAME OVER"
     cursor(1)
     color(7)
     if record<score
        strsave((PATH+"score.txt") ($score))
     endif
   end


   poneEncabezado:=function:void
     i:=number
   begin:
     color(15)
     i<-0//inicia a 0
     at(0 10);."SCORE=",score
     at(0 25);."HIGH=",record
     at(31 39); color(0); write "               "
     at(31 39); color(143);."UP "; color(104)
     ."(>)", while (++i)<vidas
   end

   poneFrutas():void
      i:=number
      posFruta:=number
   begin:
     for i<-1 to indFruta
        mulFruta<-(i-1)*3
        posFruta<-(i-1)*4
        if i=8
           --posFruta
        endif
        at(31 (8+posFruta)); color([colorFruta (1+mulFruta)]); write [frutas (1+mulFruta)]
                  color([colorFruta (2+mulFruta)]); write [frutas (2+mulFruta)]
                  color([colorFruta (3+mulFruta)]); write [frutas (3+mulFruta)]
                  
     next
   end

   cargaEscenario(main:boolean):void
   begin:
     flag ","              // flag de carga de matrices de juego
     .cargaMatrizDecision() // carga matriz de decision
     .cargaPuntos()         // carga puntos para comer
     .cargaLaberinto()      // carga el laberinto
     .muestraLaberinto(colorLAB)   // despliega laberinto
     .muestraPuntos()       // despliega puntos
     .poneEncabezado()      // pone score y vidas
     .poneGetReady(main)
   end


   iniciaPacman:=function:void
   begin:
     {Px,Py,mPx,mPy,direccion,pdireccion}<-{23,31,23,24,"E","E"}
     estadoBoca<-false   // cerrada
     boca<-"-"
     retardoP<-0
   end

   iniciaFantasmas:=function:void
   begin:
     indexF<-0
     FANx<-^[14,&  // posiciones
             14,&  /* mas posiciones */
             15,&
             15]   // posicion virtual inicial de los fantasmas
     FANy<-^[23,26,23,26]
     Fx  <-^[14,14,15,15]   // posicion fisica inicial de los fantasmas
     Fy  <-^[30,33,30,33]
     fdireccion<-^["E","E","O","O"]
//     use(Frecupera);drop
     retardoF<-0
     cntPuntos<-0
     Fcolor<-^[79,63,95,111]
     sw_azul<-false
     sw_cambiaColor<-false
     sw_intermit<-^[false,false,false,false]
   end

   poneSecuenciaInicio:=function:void
     main:=$1:boolean
   begin:
     cls; cursor(0)
     if main
        .titulo()
//        pause
        video(33 65)
        vidas<-3
        sw_vidas<-puertaVidas<-true
        etapa<-1
//        LIMITG<-850   // microsegundos del loop principal. baja hasta 650 ms
//        LIMITP<-100000  // bajará hasta 80 mil
        LIMITVIDAS<-10000  // necesita 10 mil pts para vida extra
        TIEMPOAZUL<-10
        cntLAB<-1
        use(paLAB);drop;push{9,11,13,6,10}
        colorLAB<-9
        sw_etapa<-false
        use(fantasma);drop //push{chr(239),chr(239),chr(239),chr(239)} //push{"#","@","$","%"}
        push{chr(236),chr(236),chr(236),chr(236)}
        //push{("▄"+chr(236)+"▄"),("▄"+chr(236)+"▄"),("▄"+chr(236)+"▄"),("▄"+chr(236)+"▄")}
        use(Fcolor); drop; push{79,63,95,111}      //{12,11,13,6}
        Bcolor<-^[4,3,5,6]
        tmpcolor<-^[79,63,95,111]
        tmpBcolor<-^[4,3,5,6]
        probLim<-^[0.7,0.75, 0.75,0.8, 0.8,0.85, 0.85,0.9, 0.9, 0.95]
        
        use(Fpuntos);drop; push{400,800,1200,1600}
        RETARDOP<-3200 //3500 //3200  //3500 //2500
        RETARDOF<-3150 //3000  //3300 //2700
        hPuntos<-^[150,300,500,700,1000,2000,3000,5000]
        .cargaScore()
     endif
     cls
    /* LABERINTO */
     totDots<-0
     puertaPremio<-true
     sw_dimension<-false
     hPremio<-0


    /* PACMAN */
     .iniciaPacman()
     POTENCIA<-0

    /* PASTILLAS DE PODER */
     indexP<-1
     sw_pastilla<-true
     retardoPAS<-0
     PASl<-^[true,true,true,true]


     /* drop(retPastilla)  ---> esto da error porque la dir de redPastilla era
                                colocada en el stack y nunca era usada, porque
                                DROP trabaja bajo la lógica de USE, matehuea */

    /* FANTASMAS */
    // resetea probailidad a original, dejando a Clyde como un perfecto imbecil.
     use(fprobabilidad); drop; push {6,4,5,2}
     festado<-^[true,true,true,true]
     
     .iniciaFantasmas()

    /* ESCENARIO */
     .cargaEscenario(main)  /* carga la pantalla y las matrices del juego
                           Si se pasa al siguiente nivel, realiza la
                           carajo
                           carga basica */
     //pause
//     goodbye
    /* escribe partillas de poder con color especial
       donde no exista este color, se agrega el código comentado */
     
     if tipoLab=1
        use(PASx);          drop;  push{4,4,23,23}
        use(PASy);          drop;  push{10,52,10,52}
     elseif tipoLab=2
        use(PASx);          drop;  push{5,5,26,26}
        use(PASy);          drop;  push{10,52,10,52}
     elseif tipoLab=3
        use(PASx);          drop;  push{4,4,27,27}
        use(PASy);          drop;  push{10,52,10,52}
     elseif tipoLab=4
        use(PASx);          drop;  push{3,3,23,23}
        use(PASy);          drop;  push{10,52,10,52}
     elseif tipoLab=5
        use(PASx);          drop;  push{3,3,24,24}
        use(PASy);          drop;  push{10,52,10,52}
/*     elseif tipoLab=6
        use(PASx);          drop;  push{5,5,18,18}
        use(PASy);          drop;  push{10,42,10,42}*/
     endif
     for indexP<-1 to 4
        color(142)
        at([PASx indexP] [PASy indexP]); write chr(111) //"o"
        at([Fx indexP] [Fy indexP]); color([Fcolor indexP]); write [fantasma indexP]
     next
   end

 /*  recuperaFantasmas:=function:void
     v:=number
   begin:
     use(Frecupera)
     while ~isempty
        v<-pop
        if v=1 or v=2
           [fdireccion v]<-"E"
        else
           [fdireccion v]<-"O"
        endif
     wend
   end

*/
   etapaSuperada:=function:void
     i:=number
     colores:=^number
   begin:
     msleep(990000)     // espera en microsegundos
     colores<-^[1,14,1,14,1]
     for i<-1 to 5
        cls
        .muestraLaberinto([colores i])
        msleep(800000)
     next
   end

   poneScore:=function:void
   begin:
     color(15); at(0 16); write score
   end

   verificaBoca:=function:void
     abierta:=$1:string
     cerrada:=$2:string
   begin:
     if estadoBoca
        boca<-abierta
     else
        boca<-cerrada
     endif
   end

   QUITACOMIDO(indexF:number):void
   begin:
     at([Fx indexF] ([Fy indexF]+1)) 
     if [.dots [FANx indexF] ([FANy indexF]+1)]=1
        color( {colorLAB=6?12:{colorLAB=10?15:14}} );write chr(250)
     elseif [.dots [FANx indexF] ([FANy indexF]+1)]=2
        color(142);write chr(111)
     else
        color(0);." "  // pone un espacio
     endif
           
     at([Fx indexF] [Fy indexF]) 
     if [.dots [FANx indexF] [FANy indexF]]=1
        color( {colorLAB=6?12:{colorLAB=10?15:14}} );write chr(250)
     elseif [.dots [FANx indexF] [FANy indexF]]=2
        color(142);write chr(111)
     else
        color(0);." "  // pone un espacio
     endif           

     at([Fx indexF] ([Fy indexF]-1)) 
     if [.dots [FANx indexF] ([FANy indexF]-1)]=1
        color( {colorLAB=6?12:{colorLAB=10?15:14}} );write chr(250)
     elseif [.dots [FANx indexF] ([FANy indexF]-1)]=2
        color(142);write chr(111)
     else
        color(0);." "  // pone un espacio
     endif           
   
   end
   
   quitaFantasmas:=function:void
   begin:
     for indexF<-1 to 4
//        at([Fx indexF] [Fy indexF])
//        if [.dots [FANx indexF] [FANy indexF]]=1
//          color( {colorLAB=6?12:14} );write chr(250)
//        elseif [.dots [FANx indexF] [FANy indexF]]=2
//           color(142);write chr(111) //;."o"
//        else
//           color(0);." "
//        endif
        at([Fx indexF] ([Fy indexF]+1)) 
        if [.dots [FANx indexF] ([FANy indexF]+1)]=1
           color( {colorLAB=6?12:{colorLAB=10?15:14}} );write chr(250)
        elseif [.dots [FANx indexF] ([FANy indexF]+1)]=2
           color(142);write chr(111)
        else
           color(0);." "  // pone un espacio
        endif
           
        at([Fx indexF] [Fy indexF]) 
        if [.dots [FANx indexF] [FANy indexF]]=1
           color( {colorLAB=6?12:{colorLAB=10?15:14}} );write chr(250)
        elseif [.dots [FANx indexF] [FANy indexF]]=2
           color(142);write chr(111)
        else
           color(0);." "  // pone un espacio
        endif           

        at([Fx indexF] ([Fy indexF]-1)) 
        if [.dots [FANx indexF] ([FANy indexF]-1)]=1
           color( {colorLAB=6?12:{colorLAB=10?15:14}} );write chr(250)
        elseif [.dots [FANx indexF] ([FANy indexF]-1)]=2
           color(142);write chr(111)
        else
           color(0);." "  // pone un espacio
        endif           
     next
   end

   wrongEtapa:=function:void
   begin:
     --vidas
     color(0)
//     at(24 10); ."Comete esa hueá!"
     at(17 27); ."1UP EXTRA"
     at(17 27); write "        "
     .quitaFantasmas()

     .iniciaFantasmas()
     .iniciaPacman()
     .poneEncabezado()

     .poneGetReady(false), if vidas>0
   end

   poneEstrella:=function:void
     i:=number
     colorFun:=$1:number
     desvanece:=^number
   begin:
      
      color(colorFun)
      if colorFun=104
         for i<-1 to 3
            at(Px Py); write "V"
            msleep(100000)
            at(Px Py); write "<"
            msleep(100000)
            at(Px Py); write "^"
            msleep(100000)
            at(Px Py); write ">"
            msleep(100000)
         next
      else
         desvanece<-^[6,4,8,0]
         for i<-1 to 4
            color([desvanece i])
            at(Px Py); write "V"
            msleep(100000-i*1000)
            at(Px Py); write "<"
            msleep(100000-i*1000)
            at(Px Py); write "^"
            msleep(100000-i*1000)
            at(Px Py); write ">"
            msleep(100000-i*1000)
         next
      endif
      color(0)

   end

   intermedio:=function:void
      x:=number
      sw:=boolean
   begin:
      color(0);cls
      cmd(PATHs+"pacman_intermission.wav </dev/null >/dev/null 2>&1 &")
      not sw
      at(6 23); color(15);."S T A G E   "+($tipoLab)
      for x<-1 to 50
         at(11 x);color(0);." ";color({x<43?104:0});write {sw?"<":"-"}
         not sw
         msleep(100000)
         if (x-3)>11
            at(11 (x-3)); color(0);." ";color({(x-3)<43?79:0});write "#"
         endif
         if (x-5)>11
            at(11 (x-5)); color(0);." ";color({(x-5)<43?63:0});write "$"
         endif
         if (x-7)>11
            at(11 (x-7)); color(0);." ";color({(x-7)<43?95:0});write "@"
         endif
         if (x-9)>11
            at(11 (x-9)); color(0);." ";color({(x-9)<43?111:0});write "%"
         endif
      next
      at(11 42);color(0);." "
      msleep(300000)
      cmd(PATHs+"pacman_intermission.wav </dev/null >/dev/null 2>&1 &")
      msleep(350000)
      at(11 26);color(12);."O";color(10);."^";color(12);."O"
      for x<-50 downto 1
         at(11 x);color({x>9?104:0});write {sw?">":"-"};color(0);." "
         not sw
         msleep(90000)
         if ((x+3)<43) and ((x+3)>10)
            at(11 (x+3)); color({(x+3)>3?79:0});write "#";color(0);." "
         endif
         if ((x+5)<43) and ((x+5)>10)
            at(11 (x+5)); color({(x+5)>3?63:0});write "$";color(0);." "
         endif
         if ((x+7)<43) and ((x+7)>10)
            at(11 (x+7)); color({(x+7)>3?95:0});write "@";color(0);." "
         endif
         if ((x+9)<43) and ((x+9)>10)
            at(11 (x+9)); color({(x+9)>3?111:0});write "%";color(0);." "
         endif
         if x=28
            cmd(PATHs+"pacman_eatfruit.wav </dev/null >/dev/null 2>&1 &")
         endif
      next
      at(11 11);color(0);." "
      sleep(1)
   end

   KILLWAKA():void
   begin:
      if swWaka
         swWaka<-false
         cmd("kill -9 "+PIDWAKA+" </dev/null >/dev/null 2>&1 &")
      endif
   end

   KILLPILLS():void
   begin:
      cmd("kill -9 "+PIDPILLS+" </dev/null >/dev/null 2>&1 &")
   end
   
   KILLSOUND:=function:void
     PID,WPID,wtemp:=string
     i:=number
   begin:
     PID<-fcmd("pidof "+cPLAY)
     cmd("kill -9 "+PID+ " </dev/null >/dev/null 2>&1")
   end

algorithm:


 PATH<-getenv("PATH_XU")
 if strlz(PATH)
    ."\nNo encuentro variable de entorno PATH_XU\n\n"
    ."Necesito que declares PATH_XU=ruta-donde-esta-xu\n"
    goodbye
 else
   /* esta ruta accederá a todos los recursos del
      juego, dentro de SOURCE */
    PATH<-PATH+"/source/dataPacman/"
 endif

 // chequeo de sistema operativo
 cSYS<-strupper(strcpy(system(),1,strat((flag "L")" ",system()) ))
 
 cSYS<-strtrim((flag "A")cSYS ) 
 if cSYS = "DARWIN"
    cPLAY<-"afplay"
 elseif cSYS="LINUX"
    cPLAY<-"aplay"
 else
    // puede que windows, cuando lo tenga listo
    ."Problemas... [",cSYS,"]"
    goodbye
 endif
 PATHs<-cPLAY+" "+PATH // deja "afplay /home..../source/"

 use frutas; drop
 push{"O","^","O", & //cereza
      "(",")","#", & //limón
      "#","(",")", & //manzana verde
      "{","}","#", & //piña
      "o","O","#", & //uvas
      "(",")","#", & // manzana roja
      "",chr(3),"", & /* corazon */
      chr(213),chr(209),"8"} //llave

 colorFruta<-^[12,14,12,14,14,10,2,10,10,6,6,2,13,13,2,12,12,10,0,12,0,11,11,11]
 tipoLab<-1

// colorPacman<-14
 indFruta<-1
 indLimit<-1
 precision 0
 
// .intermedio()
// goodbye

 seed(2048) 
 
 .poneSecuenciaInicio(true)

 // despues de este limite, los fantasmas "cazan"
 limiteMariconazo<-mth.int(numDots-(numDots*[probLim 1]))

 .poneFrutas()
// mulFruta<-(indFruta-1)*4
// at(31 8);  color([colorFruta (1+mulFruta)]); write [frutas (1+mulFruta)]
//            color([colorFruta (2+mulFruta)]); write [frutas (2+mulFruta)]
//            color([colorFruta (3+mulFruta)]); write [frutas (3+mulFruta)]

 while vidas>0

   sw_death<-false
   colorPacman<-14
   
   cmd(PATHs+"pacman_siren-106.wav -v 0.3 </dev/null >/dev/null 2>&1 &")

   while c<>KESCAPE

     if (++retardoF)=  RETARDOF
        retardoF<-0
       /* chequeo FANTASMAS */

        for indexF<-1 to 4
         /* los fantasmas se mueven con una probabilidad: esto marca la diferencia
            a la hora de perseguir al pacman */
//           at([Fx indexF] [Fy indexF]) 
//           if [.dots [FANx indexF] [FANy indexF]]=1
//              //color( iif( (colorLAB=6) 12 14 ));write chr(250)
//              color( {colorLAB=6?12:14} );write chr(250)
//           elseif [.dots [FANx indexF] [FANy indexF]]=2
//              color(142);write chr(111)
//           else
//              color(0);."   "  // pone un espacio
//           endif

           at([Fx indexF] ([Fy indexF]+1)) 
           if [.dots [FANx indexF] ([FANy indexF]+1)]=1
              color( {colorLAB=6?12:{colorLAB=10?15:14}} );write chr(250)
           elseif [.dots [FANx indexF] ([FANy indexF]+1)]=2
              color(142);write chr(111)
           else
              color(0);." "  // pone un espacio
           endif
           
           at([Fx indexF] ([Fy indexF]-1)) 
           if [.dots [FANx indexF] ([FANy indexF]-1)]=1
              color( {colorLAB=6?12:{colorLAB=10?15:14}} );write chr(250)
           elseif [.dots [FANx indexF] ([FANy indexF]-1)]=2
              color(142);write chr(111)
           else
              color(0);." "  // pone un espacio
           endif           
           
           at([Fx indexF] [Fy indexF]) 
           if [.dots [FANx indexF] [FANy indexF]]=1
              color( {colorLAB=6?12:{colorLAB=10?15:14}} );write chr(250)
           elseif [.dots [FANx indexF] [FANy indexF]]=2
              color(142);write chr(111)
           else
              color(0);." "  // pone un espacio
           endif           

              
          /* chequea movimiento de fantasmas segun su direccion */
           fdir<-[fdireccion indexF]
           if fdir="E"
              [FANy indexF]<-[FANy indexF]-1
              [Fy indexF]<-[Fy indexF]-1
           elseif fdir="O"
              [FANy indexF]<-[FANy indexF]+1
              [Fy indexF]<-[Fy indexF]+1
           elseif fdir="N"
              [FANx indexF]<-[FANx indexF]-1
              [Fx indexF]<-[Fx indexF]-1
           elseif fdir="S"
              [FANx indexF]<-[FANx indexF]+1
              [Fx indexF]<-[Fx indexF]+1
           endif

          /* analizamos los ptos de decision para cambiar su direccion */

           fpos<-[.pofd [FANx indexF] [FANy indexF]]

           if fpos>0
              fprob<-[fprobabilidad indexF]
              if fpos=3    // codo sup izquierdo

                 if fdir="E"
                    fdir<-"S"
                 elseif fdir="N"
                    fdir<-"O"
                 endif

              elseif fpos=4  // codo sup derecho
                 if fdir="O"
                    fdir<-"S"
                 elseif fdir="N"
                    fdir<-"E"
                 endif

              elseif fpos=6   // codo inf izquierdo
                 if fdir="E"
                    fdir<-"N"
                 elseif fdir="S"
                    fdir<-"O"
                 endif

              elseif fpos=5   // codo inf derecho
                 if fdir="O"
                    fdir<-"N"
                 elseif fdir="S"
                    fdir<-"E"
                 endif

              elseif fpos=13   // pto desicion salida de CASA
                 if sw_azul
                    pdecision<-"N"+fdir*9   // esta es una cadena de decision.
                 else
                    pdecision<-"NNN"+fdir*7
                 endif
                 fdir<-[pdecision mth.ceil(mth.rand(10))]   // buena probabilidad de salir de casa

              elseif fpos=12   // a la salida, hacia donde se dirige
                 /* chequear la direccion del pacman */
                 if Py>=[Fy indexF]  // esta a la derecha
                    pdecision<-"O"*fprob+"E"*(10-fprob)
                 elseif Py<[Fy indexF]   // esta a la izquierda
                    pdecision<-"E"*fprob+"O"*(10-fprob)
                 endif
                 fdir<-[pdecision mth.ceil(mth.rand(10))]

             /* los codos de desicion */
              elseif fpos=7     // codo "T" superior
                 if fdir="N"   // viene desde abajo
                    if Px=[Fx indexF]
                       if Py>=[Fy indexF]
//                          if sw_etapa 
//                             if indexF=1
//                                pdecision<-"OOOOOOOOOO"
//                             else
//                                pdecision<-"O"*fprob+"E"*(10-fprob)
//                             endif
//                          else
                             pdecision<-"O"*fprob+"E"*(10-fprob)
//                          endif
                       else
//                          if sw_etapa
//                             if indexF=1
//                                pdecision<-"EEEEEEEEEE"
//                             else
//                                pdecision<-"E"*fprob+"O"*(10-fprob)
//                             endif
//                          else
                             pdecision<-"E"*fprob+"O"*(10-fprob)
//                          endif
                       endif
                    elseif Px>[Fx indexF]
                       pdecision<-"EEEEEOOOOO"
                    else   // es menor
                       if Py>=[Fy indexF]  // esta a la derecha
                          pdecision<-"O"*fprob+"E"*(10-fprob)
                       else  // es menor
                          pdecision<-"E"*fprob+"O"*(10-fprob)
                       endif
                    endif
                 elseif fdir="E"  // viene desde la derecha
                    if Px=[Fx indexF]   // está abajo
                       if Py<=[Fy indexF]
//                          if sw_etapa
//                             if indexF=1
//                                pdecision<-"EEEEEEEEEE"
//                             else
//                                pdecision<-"E"*fprob+"S"*(10-fprob)
//                             endif
//                          else
                             pdecision<-"E"*fprob+"S"*(10-fprob)
//                          endif
                       else  // es mayor
//                          if sw_etapa
//                             if indexF=1
//                                pdecision<-"SSSSSSSSSS"
//                             else
//                                pdecision<-"S"*fprob+"E"*(10-fprob)
//                             endif
//                          else
                             pdecision<-"S"*fprob+"E"*(10-fprob)
//                          endif
                       endif
                    elseif Px>[Fx indexF]
                       if Py=[Fy indexF]
//                          if sw_etapa
//                             if indexF=1
//                                pdecision<-"SSSSSSSSSS"
//                             else
//                                pdecision<-"S"*fprob+"E"*(10-fprob)
//                             endif
//                          else
                             pdecision<-"S"*fprob+"E"*(10-fprob)
//                          endif
                       elseif Py<[Fy indexF]
                          pdecision<-"E"*fprob+"S"*(10-fprob)
                       else
                          pdecision<-"S"*fprob+"E"*(10-fprob)
                       endif
                    else
                       pdecision<-"E"*fprob+"S"*(10-fprob)
                    endif
                 elseif fdir="O"  // viene desde la izquierda
                    if Px=[Fx indexF]
                       if Py>=[Fy indexF]
//                          if sw_etapa
//                             if indexF=1
//                                pdecision<-"OOOOOOOOOO"
//                             else
//                                pdecision<-"O"*fprob+"S"*(10-fprob)
//                             endif
//                          else
                             pdecision<-"O"*fprob+"S"*(10-fprob)
//                          endif
                       else   // es menor
                          pdecision<-"S"*fprob+"O"*(10-fprob)
                       endif
                    elseif Px>[Fx indexF]   // está abajo
                       pdecision<-"S"*fprob+"O"*(10-fprob)
                    else   // es menor
                       pdecision<-"O"*fprob+"S"*(10-fprob)
                    endif
                 endif
                 fdir<-[pdecision mth.ceil(mth.rand(10))]
              elseif fpos=9    // codo "_|_" invertido
                 if fdir="S"    // viene desde arriba
                    if Px=[Fx indexF]
                       if Py>=[Fy indexF]  // esta a la derecha
//                          if sw_etapa
//                             if indexF=1
//                                pdecision<-"OOOOOOOOOO"
//                             else
//                                pdecision<-"O"*fprob+"E"*(10-fprob)
//                             endif
//                          else
                             pdecision<-"O"*fprob+"E"*(10-fprob)
//                          endif
                       elseif Py<[Fy indexF]   // esta a la izquierda
//                          if sw_etapa
//                             if indexF=1
//                                pdecision<-"EEEEEEEEEE"
//                             else
//                                pdecision<-"E"*fprob+"O"*(10-fprob)
//                             endif
//                          else
                             pdecision<-"E"*fprob+"O"*(10-fprob)
//                          endif
                       endif
                    elseif Px>[Fx indexF]
                       if Py>=[Fy indexF]
                          pdecision<-"O"*fprob+"E"*(10-fprob)
                       else
                          pdecision<-"E"*fprob+"O"*(10-fprob)
                       endif
                    else   // Px es menor
                       pdecision<-"EEEEEOOOOO"
                    endif
                 elseif fdir="E"  // _|_ viene desde la derecha
                    if Px>=[Fx indexF]
//                       if sw_etapa
//                          if indexF=1
//                             pdecision<-"EEEEEEEEEE"
//                          else
//                             pdecision<-"E"*fprob+"N"*(10-fprob)
//                          endif
//                       else
                          pdecision<-"E"*fprob+"N"*(10-fprob)
//                       endif
                    elseif Py>=[Fy indexF]
//                       if sw_etapa
//                          if indexF=1
//                             pdecision<-"NNNNNNNNNN"
//                          else
//                             pdecision<-"N"*fprob+"E"*(10-fprob)
//                          endif
//                       else
                          pdecision<-"N"*fprob+"E"*(10-fprob)
//                       endif
                    else
                       pdecision<-"N"*fprob+"E"*(10-fprob)
                    endif
                 elseif fdir="O"  // viene desde la izquierda
                    if Px>=[Fx indexF]   // está abajo
//                       if sw_etapa
//                          if indexF=1
//                             pdecision<-"OOOOOOOOOO"
//                          else
//                             pdecision<-"O"*fprob+"N"*(10-fprob)
//                          endif
//                       else
                          pdecision<-"O"*fprob+"N"*(10-fprob)
//                       endif
                    elseif Py>=[Fy indexF]   // está arriba
//                       if sw_etapa
//                          if indexF=1
//                             pdecision<-"NNNNNNNNNN"
//                          else
//                             pdecision<-"N"*fprob+"O"*(10-fprob)
//                          endif
//                       else
                          pdecision<-"N"*fprob+"O"*(10-fprob)
//                       endif
                    else   // Py es menor
                       pdecision<-"N"*fprob+"O"*(10-fprob)
                    endif
                 endif
                 fdir<-[pdecision mth.ceil(mth.rand(10))]
              elseif fpos=10    // codo "|-" izquierdo
                 if fdir="E"    // viene desde la derecha
                    if Py>=[Fy indexF]  // esta abajo
                       if Px>=[Fx indexF]
//                          if sw_etapa
//                             if indexF=1
//                                pdecision<-"SSSSSSSSSS"
//                             else
//                                pdecision<-"S"*fprob+"N"*(10-fprob)
//                             endif
//                          else
                             pdecision<-"S"*fprob+"N"*(10-fprob)
//                          endif
                       else
//                          if sw_etapa
//                             if indexF=1
//                                pdecision<-"NNNNNNNNNN"
//                             else
//                                pdecision<-"N"*fprob+"S"*(10-fprob)
//                             endif
//                          else
                             pdecision<-"N"*fprob+"S"*(10-fprob)
//                          endif
                       endif
                    else
                       if Px>=[Fx indexF]
                          pdecision<-"S"*fprob+"N"*(10-fprob)
                       else
                          pdecision<-"N"*fprob+"S"*(10-fprob)
                       endif
                    endif
                 elseif fdir="N"  // viene desde abajo
                    if Px=[Fx indexF]
                       if Py>=[Fy indexF]
//                          if sw_etapa
//                             if indexF=1
//                                pdecision<-"OOOOOOOOOO"
//                             else
//                                pdecision<-"O"*fprob+"N"*(10-fprob)
//                             endif
//                          else
                             pdecision<-"O"*fprob+"N"*(10-fprob)
//                          endif
                       else
                          pdecision<-"NNNNNOOOOO"
                       endif
                    elseif Px>[Fx indexF]
                       pdecision<-"O"*fprob+"N"*(10-fprob)
                    else
                       if Py>=[Fy indexF]
//                          if sw_etapa
//                             if indexF=1
//                                pdecision<-"OOOOOOOOOO"
//                             else
//                                pdecision<-"O"*fprob+"N"*(10-fprob)
//                             endif
//                          else
                             pdecision<-"O"*fprob+"N"*(10-fprob)
//                          endif
                       else
                          pdecision<-"N"*fprob+"O"*(10-fprob)
                       endif
                    endif
                 elseif fdir="S"  // viene desde arriba
                    if Px=[Fx indexF]
                       if Py>=[Fy indexF]
//                          if sw_etapa
//                             if indexF=1
//                                pdecision<-"OOOOOOOOOO"
//                             else
//                                pdecision<-"O"*fprob+"S"*(10-fprob)
//                             endif
//                          else
                             pdecision<-"O"*fprob+"S"*(10-fprob)
//                          endif
                       else
                          pdecision<-"SSSSSOOOOO"
                       endif
                    elseif Px>[Fx indexF]   // está abajo
                       if Py>=[Fy indexF]
                          pdecision<-"O"*fprob+"S"*(10-fprob)
                       else
                          pdecision<-"S"*fprob+"O"*(10-fprob)
                       endif
                    else
                       if Py>=[Fy indexF]
//                          if sw_etapa
//                             if indexF=1
//                                pdecision<-"OOOOOOOOOO"
//                             else
//                                pdecision<-"O"*fprob+"S"*(10-fprob)
//                             endif
//                          else
                             pdecision<-"O"*fprob+"S"*(10-fprob)
//                          endif
                       else
                          pdecision<-"S"*fprob+"O"*(10-fprob)
                       endif
                    endif
                 endif
                 fdir<-[pdecision mth.ceil(mth.rand(10))]
              elseif fpos=8     // codo "-|"
                 if fdir="O"    // viene desde la izquierda
                    if Py=[Fy indexF]  // esta abajo
                       if Px>=[Fx indexF]
//                          if sw_etapa
//                             if indexF=1
//                                pdecision<-"SSSSSSSSSS"
//                             else
//                                pdecision<-"S"*fprob+"N"*(10-fprob)
//                             endif
//                          else
                             pdecision<-"S"*fprob+"N"*(10-fprob)
//                          endif
                       else
//                          if sw_etapa
//                             if indexF=1
//                                pdecision<-"NNNNNNNNNN"
//                             else
//                                pdecision<-"N"*fprob+"S"*(10-fprob)
//                             endif
//                          else
                             pdecision<-"N"*fprob+"S"*(10-fprob)
//                          endif
                       endif
                    else   // puede ser > o <: da lo mismo, no puede retroceder
                       if Px>=[Fx indexF]
                          pdecision<-"S"*fprob+"N"*(10-fprob)
                       else
                          pdecision<-"N"*fprob+"S"*(10-fprob)
                       endif
                    endif
                 elseif fdir="N"  // viene desde abajo
                    if Py=[Fy indexF]
                       if Px<[Fx indexF]
//                          if sw_etapa
//                             if indexF=1
//                                pdecision<-"NNNNNNNNNN"
//                             else
//                                pdecision<-"N"*fprob+"E"*(10-fprob)
//                             endif
//                          else
                             pdecision<-"N"*fprob+"E"*(10-fprob)
//                          endif
                       elseif Px>=[Fx indexF]
//                          if sw_etapa
//                             if indexF=1
//                                pdecision<-"EEEEEEEEEE"
//                             else
//                                pdecision<-"E"*fprob+"N"*(10-fprob)
//                             endif
//                          else
                             pdecision<-"E"*fprob+"N"*(10-fprob)
//                          endif
                       endif
                    elseif Py<[Fy indexF]
                       if Px=[Fx indexF]
//                          if sw_etapa
//                             if indexF=1
//                                pdecision<-"EEEEEEEEEE"
//                             else
//                                pdecision<-"E"*fprob+"N"*(10-fprob)
//                             endif
//                          else
                             pdecision<-"E"*fprob+"N"*(10-fprob)
//                          endif
                       elseif Px<[Fx indexF]
                          pdecision<-"E"*fprob+"N"*(10-fprob)
                       else
                          pdecision<-"N"*fprob+"E"*(10-fprob)
                       endif
                    else   // es mayor
                       pdecision<-"N"*fprob+"E"*(10-fprob)
                    endif
                 elseif fdir="S"  // viene desde arriba
                    if Py=[Fy indexF]
                       if Px>[Fx indexF]
//                          if sw_etapa
//                             if indexF=1
//                                pdecision<-"SSSSSSSSSS"
//                             else
//                                pdecision<-"S"*fprob+"E"*(10-fprob)
//                             endif
//                          else
                             pdecision<-"S"*fprob+"E"*(10-fprob)
//                          endif
                       elseif Px<=[Fx indexF]
//                          if sw_etapa
//                             if indexF=1
//                                pdecision<-"EEEEEEEEEE"
//                             else
//                                pdecision<-"E"*fprob+"S"*(10-fprob)
//                             endif
//                          else
                             pdecision<-"E"*fprob+"S"*(10-fprob)
//                          endif
                       endif
                    elseif Py<[Fy indexF]
                       if Px>[Fx indexF]
                          pdecision<-"S"*fprob+"E"*(10-fprob)
                       else
//                          if sw_etapa
//                             if indexF=1
//                                pdecision<-"EEEEEEEEEE"
//                             else
//                                pdecision<-"E"*fprob+"S"*(10-fprob)
//                             endif
//                          else
                             pdecision<-"E"*fprob+"S"*(10-fprob)
//                          endif
                       endif
                    else
                       if Px>[Fx indexF]
                          pdecision<-"S"*fprob+"E"*(10-fprob)
                       else
                          pdecision<-"E"*fprob+"S"*(10-fprob)
                       endif
                    endif
                 endif
                 fdir<-[pdecision mth.ceil(mth.rand(10))]
              elseif fpos=11   // codo "+"
                 if fdir="S"
                    if Py=[Fy indexF]
                       pdecision<-"SSSSSSSSSS"
                    elseif Px=[Fx indexF]
                       if Py>=[Fy indexF]
                          pdecision<-"OOOOOOOOOO"
                       else
                          pdecision<-"EEEEEEEEEE"
                       endif
                    elseif Px<[Fx indexF]
                       if Py>=[Fy indexF]
                          pdecision<-"OOOOOOOOOO"
                       else
                          pdecision<-"EEEEEEEEEE"
                       endif
                    else
                       if Py>=[Fy indexF]
                          pdecision<-"S"*fprob+"O"*(10-fprob)
                       else
                          pdecision<-"S"*fprob+"E"*(10-fprob)
                       endif
                    endif
                 elseif fdir="N"
                    if Py=[Fy indexF]
                       pdecision<-"NNNNNNNNNN"
                    elseif Px=[Fx indexF]
                       if Py>=[Fy indexF]
                          pdecision<-"OOOOOOOOOO"
                       else
                          pdecision<-"EEEEEEEEEE"
                       endif
                    elseif Px<[Fx indexF]
                       if Py>=[Fy indexF]
                          pdecision<-"N"*fprob+"O"*(10-fprob)
                       else
                          pdecision<-"N"*fprob+"E"*(10-fprob)
                       endif
                    else
                       if Py>=[Fy indexF]
                          pdecision<-"OOOOOOOOOO"
                       else
                          pdecision<-"EEEEEEEEEE"
                       endif
                    endif
                 elseif fdir="E"
                    if Px=[Fx indexF]
                       if Py<=[Fy indexF]
                          pdecision<-"EEEEEEEEEE"
                       else
                          pdecision<-"NNNNNSSSSS"
                       endif
                    elseif Py=[Fy indexF]
                       if Px<=[Fx indexF]
                          pdecision<-"NNNNNNNNNN"
                       else
                          pdecision<-"SSSSSSSSSS"
                       endif
                    elseif Px<[Fx indexF] and Py<[Fy indexF]
                       pdecision<-"NNNNNEEEEE"
                    elseif Px<[Fx indexF] and Py>[Fy indexF]
                       pdecision<-"NNNNNNNNNN"
                    elseif Px>[Fx indexF] and Py<[Fy indexF]
                       pdecision<-"SSSSSEEEEE"
                    elseif Px>[Fx indexF] and Py>[Fy indexF]
                       pdecision<-"SSSSSSSSSS"
                    endif
                 elseif fdir="O"
                    if Px=[Fx indexF]
                       if Py>=[Fy indexF]
                          pdecision<-"OOOOOOOOOO"
                       else
                          pdecision<-"NNNNNSSSSS"
                       endif
                    elseif Py=[Fy indexF]
                       if Px<=[Fx indexF]
                          pdecision<-"NNNNNNNNNN"
                       else
                          pdecision<-"SSSSSSSSSS"
                       endif
                    elseif Px<[Fx indexF] and Py<[Fy indexF]
                       pdecision<-"NNNNNNNNNN"
                    elseif Px<[Fx indexF] and Py>[Fy indexF]
                       pdecision<-"NNNNNOOOOO"
                    elseif Px>[Fx indexF] and Py<[Fy indexF]
                       pdecision<-"SSSSSSSSSS"
                    elseif Px>[Fx indexF] and Py>[Fy indexF]
                       pdecision<-"SSSSSOOOOO"
                    endif
                 endif
                 fdir<-[pdecision mth.ceil(mth.rand(10))]
              endif

           endif

           [fdireccion indexF]<-fdir
           if sw_cambiaColor
              if ~[festado indexF]
                 if [sw_intermit indexF]
                    at([Fx indexF] ([Fy indexF]-1)); color(15); ."▄"
                    color(120); write [fantasma indexF]
                    color(15); ."▄"
                    [sw_intermit indexF]<-false
                 else
                    at([Fx indexF] ([Fy indexF]-1)); color([Bcolor indexF]); ."▄"
                    color([Fcolor indexF]); write [fantasma indexF]
                    color([Bcolor indexF]); ."▄"
                    [sw_intermit indexF]<-true
                 endif
              else
                 at([Fx indexF] ([Fy indexF]-1)); color([Bcolor indexF]); ."▄"
                 color([Fcolor indexF]); write [fantasma indexF]
                 color([Bcolor indexF]); ."▄"
              endif
           else
              at([Fx indexF] ([Fy indexF]-1)); color([Bcolor indexF]); ."▄"
              color([Fcolor indexF]); write [fantasma indexF]
              color([Bcolor indexF]); ."▄"
           endif
           
          /* chequea si comen o no jajajaja */

           if mPx=[FANx indexF] and mPy=[FANy indexF]

              if [festado indexF] //~sw_azul

                 sw_death<-false
                 //at(14 23); write (color(12)) "TRAPPED!"
                 .KILLSOUND()
                 flush()
                 sleep(1)
                 cmd(PATHs+"pacman_death.wav </dev/null >/dev/null 2>&1 &")
                 .quitaFantasmas()
                 .poneEstrella(14)
                 .wrongEtapa()
                 sw_death<-true
                 break
              else
                 ++cntPuntos
                 score<-+[Fpuntos cntPuntos]
                 at(14 30);color(143);write [Fpuntos cntPuntos]
                 .KILLWAKA()
                 cmd(PATHs+"pacman_eatghost.wav </dev/null >/dev/null 2>&1 &")
                 .poneScore()
                 //gosub "poneScore"
                 .QUITACOMIDO(indexF)
                 
                 .poneEstrella(104)
                 at(14 30);color(0);write "    "
                 [fdireccion indexF]<-"E"
//                 use(Frecupera); push(indexF)
                 [festado indexF]<-true
                 [Fcolor indexF]<-[tmpcolor indexF]
                 [Bcolor indexF]<-[tmpBcolor indexF]
                 if indexF=1
                    [FANx indexF]<-14 ; [FANy indexF]<-23; [Fx indexF]<-14; [Fy indexF]<-30
                 elseif indexF=2
                    [FANx indexF]<-14; [FANy indexF]<-26; [Fx indexF]<-14; [Fy indexF]<-33
                 elseif indexF=3
                    [FANx indexF]<-15; [FANy indexF]<-23; [Fx indexF]<-15; [Fy indexF]<-30
                 else
                    [FANx indexF]<-15; [FANy indexF]<-26; [Fx indexF]<-15; [Fy indexF]<-33
                 endif
                 flush()
              endif
           endif
        next
        brkif sw_death
     endif

     if sw_dimension
        flush()
        if seconds(timenow)-timeDimension >=1
           sw_dimension<-false
        else
           continue
        endif
     endif

     
    /* chequeo PACMAN */
     if (++retardoP)=RETARDOP //-POTENCIA
        retardoP<-0
//      if ~sw_dimension
       /* recibe key */
        readkey(c)
        flush()
        if strupper(chr(c))="P"
           .KILLSOUND()
           pause
           cmd(PATHs+"pacman_siren-106.wav -v 0.3 </dev/null >/dev/null 2>&1 &")
        endif

        at(Px (Py-1)); color(0); write "   ";color(10)  // si hay error por aquí, habilitar: ;color(10)

        at(Px (Py-1)) 
//        try
        if [.dots mPx (mPy-1)]=1
           color( {colorLAB=6?12:{colorLAB=10?15:14}} );write chr(250)
        elseif [.dots mPx (mPy-1)]=2
           color(142);write chr(111)
        else
           color(0);." "  // pone un espacio
        endif
//        exception
//          
//        tend           
        at(Px (Py+1)) 
        if [.dots mPx (mPy+1)]=1
           color( {colorLAB=6?12:{colorLAB=10?15:14}} );write chr(250)
        elseif [.dots mPx (mPy+1)]=2
           color(142);write chr(111)
        else
           color(0);." "  // pone un espacio
        endif           
        
        color(10) // para errores en depuracion
        
        if c>0

           sw<-false
           pdireccion<-"X"
           if c=KUP
              if [.dots (mPx-1) mPy]<>0
                 --Px;--mPx;direccion<-"N"; .verificaBoca("V" "|")
                 sw<-true
              else
                 pdireccion<-"N"
              endif
           elseif c=KDOWN
              if [.dots (mPx+1) mPy]<>0
                 ++Px;++mPx;direccion<-"S"; .verificaBoca("^" "|")
                 sw<-true
              else
                 pdireccion<-"S"
              endif
           elseif c=KLEFT
              try
              if [.dots mPx (mPy-1)]<>0
                 --Py;--mPy;direccion<-"E"; .verificaBoca(">" "-")
                 sw<-true
              else
                 pdireccion<-"E"
              endif
              exception
                 pdireccion<-"E"
              tend
           elseif c=KRIGHT
              if [.dots mPx (mPy+1)]<>0
                 ++Py;++mPy;direccion<-"O"; .verificaBoca("<" "-")
                 sw<-true

              else
                 pdireccion<-"O"
              endif
           endif
           if ~sw    // no pudo cambiar de dirección: analiza la direccion que seguia

              if direccion="N"
                 if [.dots (mPx-1) mPy]<>0
                    --Px;--mPx;direccion<-"N"; .verificaBoca("V" "|")
                 endif
              elseif direccion="S"
                 if [.dots (mPx+1) mPy]<>0
                    ++Px;++mPx;direccion<-"S"; .verificaBoca("^" "|")
                 endif
              elseif direccion="E"
                 if [.dots mPx (mPy-1)]<>0
                    --Py;--mPy;direccion<-"E"; .verificaBoca(">" "-")
                 endif
              else
                 if [.dots mPx (mPy+1)]<>0
                    ++Py;++mPy;direccion<-"O"; .verificaBoca("<" "-")
                 endif
              endif
           endif
        else  // no ha presionado ninguna tecla: sigue direccion en curso
           sw<-false

           if pdireccion<>"X"   // ha sugerido direccion posible
              if pdireccion="N"
                 if [.dots (mPx-1) mPy]<>0
                    --Px;--mPx;direccion<-"N"; .verificaBoca("V" "|")
                    sw<-true
                 endif
              elseif pdireccion="S"
                 if [.dots (mPx+1) mPy]<>0
                    ++Px;++mPx;direccion<-"S"; .verificaBoca("^" "|")
                    sw<-true
                 endif
              elseif pdireccion="E"
                 if [.dots mPx (mPy-1)]<>0
                    --Py;--mPy;direccion<-"E"; .verificaBoca(">" "-")
                    sw<-true
                 endif
              else
                 if [.dots mPx (mPy+1)]<>0
                    ++Py;++mPy;direccion<-"O"; .verificaBoca("<" "-")
                    sw<-true
                 endif
              endif
           endif
           if (~sw) or pdireccion="X"   // no pudo tomar direccion sugerida o no hay sugerencia

              if direccion="N"       // la direccion que lleva es valida en el siguiente paso?
                 if [.dots (mPx-1) mPy]<>0
                    --Px;--mPx;direccion<-"N"; .verificaBoca("V" "|")
                 endif
              elseif direccion="S"
                 if [.dots (mPx+1) mPy]<>0
                    ++Px;++mPx;direccion<-"S"; .verificaBoca("^" "|")
                 endif
              elseif direccion="E"
                 if [.dots mPx (mPy-1)]<>0
                    --Py;--mPy;direccion<-"E"; .verificaBoca(">" "-")
                 endif
              else
                 if [.dots mPx (mPy+1)]<>0
                    ++Py;++mPy;direccion<-"O"; .verificaBoca("<" "-")
                 endif
              endif
           endif
        endif

        if [.dots mPx mPy]=1    // pastilla simple
           [.dots mPx mPy]<-3  // consumido!
           totDots<-+1
           score<-+10
           if totDots=limiteMariconazo
              sw_etapa<-true
              use(fprobabilidad); drop; push {8,6,7,3}
              
           endif
           if ~swWaka
//              color(79)
//              write "ACTUAL=",fcmd("pidof "+cPLAY)," ; " ; pause
              cmd(PATHs+"pacman_waca1.wav </dev/null >/dev/null 2>&1 &")
              PIDWAKA<- fcmd("pidof "+cPLAY)
              //color(79)
//              write "TOTAL=",PIDWAKA,"\n" ; pause
              nWaka<-strntok((flag " ") PIDWAKA)
              //write nWaka,"\n"; pause
              PIDWAKA<-strtok(PIDWAKA 1)
//              write "WAKA=",PIDWAKA,"\n" ; pause
              
              swWaka<-true
           endif
           .poneScore()
           //gosub "poneScore"
        elseif [.dots mPx mPy]=2  // pastilla de poder
           [.dots mPx mPy]<-3  // consumido!
           .KILLSOUND()
           totDots<-+1
           score<-+250
           .poneScore()
           if totDots=limiteMariconazo
              sw_etapa<-true
              use(fprobabilidad); drop; push {8,6,7,3}
           endif
           
           //gosub "poneScore"
           sw_azul<-true
           cntPuntos<-0
           festado<-^[false,false,false,false]
           RETARDOP <-> RETARDOF
//           colorPacman<-112
//           tmpRET<-RETARDOP
//           RETARDOP<-RETARDOF
//           RETARDOF<-tmpRET
           {retardoP,retardoF}<-0
//           POTENCIA<-400
           Fcolor<-^[31,31,31,31]
           Bcolor<-^[1,1,1,1]
           timeAZUL<-seconds(timenow)
           for Pi<-1 to 4
              if Px=[PASx Pi] and Py=[PASy Pi]
                 [PASl Pi]<-false
                 break
              endif
           next
           cmd(PATHs+"pacman-pills.wav </dev/null >/dev/null 2>&1 &")
           PIDPILLS<- fcmd("pidof "+cPLAY)
           nPills<-strntok((flag " ") PIDPILLS)
           PIDPILLS<-strtok(PIDPILLS 1)

        elseif [.dots mPx mPy]=5  // premio "la hueá"
           [.dots mPx mPy]<-3  // consumido!
           score<-+hPremio
           cmd(PATHs+"pacman_eatfruit.wav </dev/null >/dev/null 2>&1 &")
           .poneScore()
           //gosub "poneScore"
           [.dots 17 23]<-3;[.dots 17 24]<-3;[.dots 17 25]<-3
           time<-seconds(timenow)
           sw_puntos<-true
           sw_pichula<-false
           color(0)
           at(17 30); write [frutas (1+mulFruta)]
                      write [frutas (2+mulFruta)]
                      write [frutas (3+mulFruta)]
//           at(24 10); ."Comete esa fruta!"
        else
           .KILLWAKA()
        endif

       /* verifica si se metio en la puerta dimensional */
        if [.dots mPx mPy]=4
           if mPy=2
              mPy<-46; Py<-53
           else
              mPy<-2 ; Py<-9
           endif
           timeDimension<-seconds(timenow)
           sw_dimension<-true

           continue
        endif

       /* pone Pacman, mi heroe infantil */
        not estadoBoca
        at(Px (Py-1)) ; color(colorPacman); write "("+boca+")"

       /* CHEQUEO COMER FANTASMAS */
       /* chequea tiempo de vulnerabilidad */
        if sw_azul
           if seconds(timenow)-timeAZUL >= TIEMPOAZUL
              sw_azul<-false
              Fcolor<-^[79,63,95,111]
              Bcolor<-^[4,3,5,6]
              cntPuntos<-0
              festado<-^[true,true,true,true]
              colorPacman<-14
//              POTENCIA<-0
//              .recuperaFantasmas()
//              use(Frecupera);drop
              sw_cambiaColor<-false
              RETARDOP <-> RETARDOF
//              tmpRET<-RETARDOP
//              RETARDOP<-RETARDOF
//              RETARDOF<-tmpRET
              {retardoP,retardoF}<-0
              .KILLPILLS()
              cmd(PATHs+"pacman_siren-106.wav -v 0.3 </dev/null >/dev/null 2>&1 &")
           elseif seconds(timenow)-timeAZUL >= (TIEMPOAZUL\2)
              sw_cambiaColor<-true
//                 for indexF<-1 to 4
//                    if ~[festado indexF]
//                       [Fcolor indexF]<-151
//                       [Bcolor indexF]<-129
//                    endif
//                 next
//                 sw_cambiaColor<-false
//              endif
           endif
          /* verifico si come a un fantasma */
           for indexF<-1 to 4
              if mPx=[FANx indexF] and mPy=[FANy indexF]
                
                 if ~[festado indexF]
                    ++cntPuntos
                    score<-+[Fpuntos cntPuntos]

                    at(14 30);color(143);write [Fpuntos cntPuntos]
                    .KILLWAKA()
                    cmd(PATHs+"pacman_eatghost.wav </dev/null >/dev/null 2>&1 &")
                    .poneScore()
                    //gosub "poneScore"
                    .QUITACOMIDO(indexF)
                    
                    .poneEstrella(104)
                    at(14 30);color(0);write "    "
                    [fdireccion indexF]<-"O"
                    // use(Frecupera); push(indexF)
                    [festado indexF]<-true
                    [Fcolor indexF]<-[tmpcolor indexF]
                    [Bcolor indexF]<-[tmpBcolor indexF]
                    if indexF=1         
                       [FANx indexF]<-14 ; [FANy indexF]<-23; [Fx indexF]<-14; [Fy indexF]<-30
                    elseif indexF=2
                       [FANx indexF]<-14; [FANy indexF]<-26; [Fx indexF]<-14; [Fy indexF]<-33
                    elseif indexF=3
                       [FANx indexF]<-15; [FANy indexF]<-23; [Fx indexF]<-15; [Fy indexF]<-30
                    else
                       [FANx indexF]<-15; [FANy indexF]<-26; [Fx indexF]<-15; [Fy indexF]<-33
                    endif

                    cmd(PATHs+"pacman_aftereatghost.wav </dev/null >/dev/null 2>&1 &")
                    flush()
                 else
                    at([Fx indexF] ([Fy indexF]-1)); color([Bcolor indexF]); ."▄"
                    color([Fcolor indexF]); write [fantasma indexF]
                    color([Bcolor indexF]); ."▄"
                    .KILLSOUND()
                    flush()
                    sleep(1)
                    cmd(PATHs+"pacman_death.wav </dev/null >/dev/null 2>&1 &")
                    .quitaFantasmas()
                    .poneEstrella(14)
                    .wrongEtapa()
                    sw_death<-true
                    break
                 endif
              endif
           next
        else  // veo si se lo comen
           for indexF<-1 to 4
              if mPx=[FANx indexF] and mPy=[FANy indexF]
                 //at(14 23); write (color(12)) "TRAPPED!"
                 at([Fx indexF] ([Fy indexF]-1)); color([Bcolor indexF]); ."▄"
                 color([Fcolor indexF]); write [fantasma indexF]
                 color([Bcolor indexF]); ."▄"
                 
                 .KILLSOUND()
                 flush()
                 sleep(1)
                 cmd(PATHs+"pacman_death.wav </dev/null >/dev/null 2>&1 &")
                 .quitaFantasmas()
                 .poneEstrella(14)
                 .wrongEtapa()
                 sw_death<-true
                 break
              endif
           next
           brkif sw_death
        endif

       /* verifica si puede tener una vida extra */
        room puertaVidas
           if sw_vidas
              if score>=LIMITVIDAS
                 ++vidas
                 cmd(PATHs+"pacman_extrapac.wav </dev/null >/dev/null 2>&1 &")
                 .poneEncabezado()
                 if LIMITVIDAS=20000
                    {puertaVidas,sw_vidas}<-false  // se acabaron las vidas extra
                 endif
                 LIMITVIDAS<-20000
                 sw_msgvida<-true
                 at(17 27);color(130);."1UP EXTRA"
                 timevida<-seconds(timenow)
              endif
           endif

          /* verifica si pasó el tiempo del mensaje extra */
           if sw_msgvida
              if (seconds(timenow)-timevida) >= 4
                 sw_msgvida<-false
                 color(0)
              else
                 color(130)
              endif
              at(17 27); ."1UP EXTRA"
           endif
        rend

       /* PREMIO: LA HUEA */
//  pone el premio si el numero de puntos consumidos es la 1/3 parte
//  y 2/3 partes
        room puertaPremio
           if totDots=127 and ~sw_pichula
              [.dots 17 23]<-5;[.dots 17 24]<-5;[.dots 17 25]<-5
//              indFruta<-(#["11111222233344556678" mth.ceil(mth.rand(20))] )
              hPremio<-[hPuntos indFruta]
              //at(14 25); color(13); write [frutas indFruta]
              mulFruta<-(indFruta-1)*3
              at(17 30); color([colorFruta (1+mulFruta)]); write [frutas (1+mulFruta)]
                         color([colorFruta (2+mulFruta)]); write [frutas (2+mulFruta)]
                         color([colorFruta (3+mulFruta)]); write [frutas (3+mulFruta)]
//              at(24 10); ."Comete esa fruta!"
//              cmd(PATHs+"come.wav </dev/null >/dev/null 2>&1 &")
              time<-seconds(timenow)
//              hPremio<-[hPuntos (#["1333225567" mth.ceil(mth.rand(10))] )]
              sw_pichula<-true
           endif
          /* verifica si pasó el tiempo y no comió la hueá */
           if sw_pichula
              if seconds(timenow)-time >= 10   // 10 segundos para comerse la hueá
                 sw_pichula<-false
                 color(0)
                 [.dots 17 23]<-3;[.dots 17 24]<-3;[.dots 17 25]<-3
                 at(17 30); write [frutas (1+mulFruta)]
                            write [frutas (2+mulFruta)]
                            write [frutas (3+mulFruta)]
//                 at(24 10); ."Comete esa fruta!"
              else
                 at(17 30); color([colorFruta (1+mulFruta)]); write [frutas (1+mulFruta)]
                            color([colorFruta (2+mulFruta)]); write [frutas (2+mulFruta)]
                            color([colorFruta (3+mulFruta)]); write [frutas (3+mulFruta)]
//                 at(24 10); ."Comete esa fruta!"
              endif
           endif
          /* verifica que muestre los puntos por la hueá consumida */
           if sw_puntos
              if seconds(timenow)-time >= 3
                 sw_puntos<-puertaPremio<-false
                 color(0)
              else
                 color(15)
              endif
              at(17 29); write hPremio
           endif
        rend

       /* COMIO TODOS LOS PUNTOS? */
        if totDots=numDots
           .KILLSOUND()
           ++etapa
           ++indFruta
           if indFruta>8
              indFruta<-8  // después del laberinto 8, la fruta es una llave de 5 lukas.
           endif
           if (++indLimit)>10
              indLimit<-10
           endif
           color(0)
//           cntLAB<-1, if (++cntLAB)>14
//           colorLAB<-[paLAB cntLAB]
           .etapaSuperada()
           if (etapa%3)=0  // cada 2 pantallas, cambia el stage y un nuevo laberinto aparece
              ++tipoLab
              .intermedio()
              if tipoLab=6
                 tipoLab<-1
              endif
              colorLAB<-[paLAB tipoLab]

              // al superar un stage, se reduce el tiempo para comer fantasmas en un segundo
              --TIEMPOAZUL
              if TIEMPOAZUL<3
                 TIEMPOAZUL<-3
              endif
           endif
          // aumenta levemente la velocidad de los protas
           --RETARDOP
           --RETARDOF
           retardoP<-0
           retardoF<-0
           
           sw_etapa<-false
           Fcolor<-^[79,63,95,111]
           Bcolor<-^[4,3,5,6]
           festado<-^[true,true,true,true]
           colorPacman<-14
           
           .poneSecuenciaInicio(false)
           // despues de este limite, los fantasmas "cazan"
           limiteMariconazo<-mth.int(numDots-(numDots*[probLim indLimit]))
           .poneFrutas()           
           cmd(PATHs+"pacman_siren-106.wav -v 0.3 </dev/null >/dev/null 2>&1 &")
        endif
//       endif //sw_dimension
      endif  // PACMAN

     /* PUNTOS DE PODER */
      if (++retardoPAS)=10000  //RETARDOPAS
         retardoPAS<-0
         not sw_pastilla
         for Pi<-1 to 4
            color(14)
            if [PASl Pi]
               at([PASx Pi] [PASy Pi])
               color({sw_pastilla?14:8})
               write chr(111) //111
            endif
         next
      endif

   wend
   brkif c=KESCAPE
   if vidas>0
      Fcolor<-^[79,63,95,111]
      Bcolor<-^[4,3,5,6]
      festado<-^[true,true,true,true]
   endif
 wend
 sleep(1)
 .KILLSOUND()

 .poneFinal()
 vtab(14)
stop

