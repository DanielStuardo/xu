// Programa XU
#use string, math, matrix,trig

//#include
#define FUEL  3000

name: Juego "Lunar Landing"

functions:

logo():void
  f,c,Fhalf,Chalf:=number
begin:
  crtdim(f c)
  {Fhalf,Chalf}<-{f\2-12, c\2-29}
  at((Fhalf+0) Chalf);."  ▄▄▄▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▄▄▄  "
  at((Fhalf+1) Chalf);."▄▀                  W O R L D   O F                     ▀▄"
  at((Fhalf+2) Chalf);."█                                                        █"
  at((Fhalf+3) Chalf);."█       █    ▄▀▀▄     ▄▄██▄▄     █    ▄▀▀▄     █████     █"
  at((Fhalf+4) Chalf);."█      ███   █   █ ▄█████████▄  ███   █   ▀▄  ███▀▀▀     █"
  at((Fhalf+5) Chalf);."█     █▀█▀█  ██ █ ▄██▀▄█▀▀▀    █▀█▀█  █    |  █|         █"
  at((Fhalf+6) Chalf);."█     ▀▄█▄▀  |▄█▄ ▀█████▄▄▄    ▀▄█▄▀  |    █ █████       █"
  at((Fhalf+7) Chalf);."█     █▀ ▀█  █  ▀▄ ▀█████████▀ █▀ ▀█  |   ▄▀ ██          █"
  at((Fhalf+8) Chalf);."█    ▀▄   ▄▀ ▀▄  █    ▀▀██▀▀  ▀▄   ▄▀ ▀▄▄▀  █████        █"
  at((Fhalf+9) Chalf);."█                                                        █"
  at((Fhalf+10) Chalf);."█                  ▄▀▀▄ ▄▀▀  ▄▀▀ █ █                     █"
  at((Fhalf+11) Chalf);."█                  █▄▄█ ▀▄  █    █ █                     █"
  at((Fhalf+12) Chalf);."█                  █  █ ▄▄▀  ▀▄▄ █ █                     █"
  at((Fhalf+13) Chalf);."█                                                        █"
  at((Fhalf+14) Chalf);."█                   PRESENTADO  POR                      █"
  at((Fhalf+15) Chalf);."█                                                        █"
  at((Fhalf+16) Chalf);."█           █▄ ▄█  ▄  █▀▄ ▄▀▄ █  ▀ ██ █▄ █               █"
  at((Fhalf+17) Chalf);."█           █ ▀ █ █   █▄▀ █▀█ █▄ █ █▄ █ ▀█               █"
  at((Fhalf+18) Chalf);."█                                                        █"
  at((Fhalf+19) Chalf);."█                     POWERED  BY                        █"
  at((Fhalf+20) Chalf);."█                                                        █"
  at((Fhalf+21) Chalf);."█                     ▀▄ ▄▀  █  █                        █"
  at((Fhalf+22) Chalf);."█                      ▄▀▄   █  █                        █"
  at((Fhalf+23) Chalf);."█                     ▀   ▀   ▀▀                         █"
  at((Fhalf+24) Chalf);." ▀▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▀ " 
  sleep(5)
//  pause
  cls
end

game_over := function:void
   colx:=number
begin:
//  cls
  color 6
  colx<-32
  at(13 colx); ." ▄▄  ▄   ▄ ▄   ▄▄"
  at(14 colx); ."█ ▄ █▄█ █ █ █ █▀ "
  at(15 colx); ." ▀▀ ▀ ▀ ▀ ▀ ▀  ▀▀"
  at(16 colx); ."  ▄  ▄ ▄  ▄▄  ▄  "
  at(17 colx); ." █ █ █ █ █▀  █▄▀ "
  at(18 colx); ."  ▀   ▀   ▀▀ ▀ ▀ "

  sleep(3)
//  color 0
//  at(13 colx); ." ▄▄  ▄   ▄ ▄   ▄▄"
//  at(14 colx); ."█ ▄ █▄█ █ █ █ █▀ "
//  at(15 colx); ." ▀▀ ▀ ▀ ▀ ▀ ▀  ▀▀"
//  at(16 colx); ."  ▄  ▄ ▄  ▄▄  ▄  "
//  at(17 colx); ." █ █ █ █ █▀  █▄▀ "
//  at(18 colx); ."  ▀   ▀   ▀▀ ▀ ▀ "
  
end

pone_msg(msg:string,linea:number,columna:number,tipo:boolean):void
  k:=number
begin:
   cursor(1)
//   color(15)
   for k<-1 to strlen(msg)
     at(linea (columna+k)); write strcpy(msg k 1)
     millisec(30),if tipo
   next
   cursor(0)
end


titulo():void
   i,t,j:=number
   time:=^number
   tipo:=boolean
   condor5,coloresMap:=^number
begin:
  cls
  .logo()
  
  time<-[=1 1000 287 ]   //[=100 1.5 98]
  
  mat.load((flag ",") condor5 (PATH+"condor5.map" ) )
  coloresMap<-^[35,8,176,9,177,12,219,15,178,14,42,15]
  cmd(PATHs+"lunar_intro.wav </dev/null >/dev/null 2>&1 &")
  sleep(10)
  cmd(PATHs+"lunar_despegue_intro.wav </dev/null >/dev/null 2>&1 &")
  sleep(5)
  at(1,16); color(15)
  i<-1
  j<-287
  while i<278
     writmap(condor5 coloresMap i (i+25) 1 48 0)
     ++i
     millisec(mth.log([time j])*10)
     --j
  wend
  
  millisec(1500)//sleep(2)
  use condor5; drop
  use coloresMap; drop
  use time; drop
  j<-1
  while j<15
     color {(j%2=0)?14:6}
     at(3,25);  write "    █   █  █ █  █  ██  ███    "
     at(4,25);  write "    █   █  █ ██ █ █  █ █  █   "
     at(5,25);  write "    █   █  █ ██ █ █  █ ███    "
     at(6,25);  write "    ███  ██  █ ██ █  █ █  █   "
     color {(j%2=0)?6:14}
     at(8,25);  write "█    ██  █  █ ███  █ █  █ ████"
     at(9,25);  write "█   █  █ ██ █ █  █ █ ██ █ █   "
     at(10,25); write "█   █  █ ██ █ █  █ █ ██ █ █  █"
     at(11,25); write "███ █  █ █ ██ ███  █ █ ██ ████"
     millisec(100)
     ++j
  wend
  
  color 11
  .pone_msg("    F I R S T",1,29,true)
  .pone_msg("C H I L E A N",2,29,true)
  
  at(1,43);color 1;."█";color 31;."*";color 1;."█";color 15;."█████"
  at(2,43);color 12;."████████"
  color 11
  sleep(2)
  .pone_msg("CONDOR V - CHILEAN TECHNOLOGY",12,25,true)
  color 14
  i<-1
  tipo<-true
  while i<=2
     .pone_msg("La MISION CONDOR es controlada",14,23,tipo)
     .pone_msg("por una SUPERCOMPUTADORA que ",15,23,tipo)
     .pone_msg("guiará y alunizará el módulo lunar.",16,23,tipo)
     cursor 1, if i=1
     at(17,24); write ""
     
     sleep(2),if i=1
     .pone_msg("Elegimos a un ebrio para tripular",18,23,tipo)
     .pone_msg("el aparato, y así demostrar nuestra",19,23,tipo)
     .pone_msg("superioridad tecnológica.",20,23,tipo)
     cursor 1, if i=1
     at(21,24); write ""
     sleep(2),if i=1
     color 0
     not tipo
     ++i
  wend
  color 14
  i<-1
  tipo<-true
  while i<=2
     .pone_msg("La CPU elegirá el mejor objetivo",14,23,tipo)
     .pone_msg("para alunizar, y controlará todos",15,23,tipo)
     .pone_msg("los aspectos técnicos del módulo:",16,23,tipo)
     cursor 1, if i=1
     at(17,24); write ""
     
     sleep(2),if i=1
     .pone_msg((chr(251)+" Encendido/apagado de motores"),18,23,tipo)
     .pone_msg((chr(251)+" Soporte vital"),19,23,tipo)
     .pone_msg((chr(251)+" Nivelación del módulo"),20,23,tipo)
     .pone_msg((chr(251)+" Control de fallas en tiempo real."),21,23,tipo)
     cursor 1, if i=1
     at(22,24); write ""
     sleep(3),if i=1
     color 0
     not tipo
     ++i
  wend
//  color 14
  i<-1
  tipo<-true
  while i<=2
     color 6, if i=1
     .pone_msg("Ahora, si en el remoto caso, muy",14,23,tipo)
     .pone_msg("improbable, que existiese una",15,23,tipo)
     .pone_msg("ínfima posibilidad de \"eventos\",",16,23,tipo)
     .pone_msg("o sea, \"por si las moscas\"...",17,23,tipo)
     .pone_msg("TENGA ESTO PRESENTE:",18,23,tipo)
     
     color 10, if i=1
     .pone_msg("Flechas: ",20,23,tipo)
     .pone_msg("  UP-DOWN..........ON-OFF MOTORES",21,23,tipo)
     .pone_msg("  LEFT-RIGHT.......NIVELA MODULO",22,23,tipo)
     cursor 1, if i=1
     at(23,24); write ""
     sleep(4), if i=1
     color 0
     not tipo
     ++i
  wend
//  color 14
  i<-1
  tipo<-true
  while i<=2
     color 6,if i=1
     .pone_msg("Pero, lo más importante:",17,23,tipo)
     color 15, if i=1
     .pone_msg(" PRESIONE CADA BOTON QUE PARPADEE",19,23,tipo)
     .pone_msg("      Y HAGALO RAPIDAMENTE",20,23,tipo)
     cursor 1, if i=1
     at(21,24); write ""
     sleep(3), if i=1
     color 0
     not tipo
     ++i
  wend
  color 15
//  sleep(13)
  .pone_msg("         BUENA SUERTE!        ",17,23,true)
  sleep(1)
  .pone_msg("PRESIONE UNA TECLA PARA INICIAR ",20,23,true)
  
  pause
  
  use time; drop
  use condor5; drop
  cls
//  stop
end


DDAlinea(x1:number, y1:number,x2:number,y2:number):void
  x, y, dx, dy, paso:=number
  i, gm:=number
begin:
  dx <- (x2 - x1)
  dy <- (y2 - y1)
  if (mth.abs(dx) >= mth.abs(dy))
     paso <- mth.abs(dx)
  else
     paso <- mth.abs(dy)
  endif
  // incremento   
  dx <- dx / paso
  dy <- dy / paso
  i <- 0
  while(i <= paso)
     at(x1 y1); write "═"//"█"
     x1 <- x1 + dx
     y1 <- y1 + dy
     ++i
  wend
end

drawPoli(verticesx:^number, verticesy:^number,N:number):void
  i:=number
begin:
  for i <- 2 to N
      .DDAlinea( [verticesx (i-1)] [verticesy (i-1)] [verticesx i] [verticesy i] )
  next
  .DDAlinea( [verticesx N] [verticesy N] [verticesx 1] [verticesy 1] )
end

precalculo():^number
  tsc:=^number
  i,angulo:=number
begin:
  dim tsc(2,360)
  for i<-1 to 360
     angulo <- trg.d2r(i)
     [.tsc 1 i] <- trg.sin(angulo)
     [.tsc 2 i] <- trg.cos(angulo)
  next
  return tsc
end

vdraw(vertices:^number):void
  i:=number
  N:=number
begin:
  N<-[[@vertices] 2]
  for i <- 2 to N
     .DDAlinea( [.vertices (i-1) 1] [.vertices (i-1) 2] [.vertices i 1] [.vertices i 2] )
  next
  .DDAlinea( [.vertices N 1] [.vertices N 2] [.vertices 1 1] [.vertices 1 2] )
end

vpoligono(N:number,cx:number,cy:number,radio:number):^number
  vertices:=^number
  alfa,i:=number
begin:
  alfa<- (2* 3.141592) / N
  dim vertices(N,2)
  for i<- 1 to N
     [.vertices i 1] <- (cx + radio * trg.cos( (i-1)*alfa ))  // X
     [.vertices i 2] <- (cy + radio * trg.sin( (i-1)*alfa ))  // Y
  next
  return vertices
end

rotacion(vertices:^number(ref),xc:number,yc:number,angulo:number):void
  r:=^number
  N,i,angSen,angCos:=number
  fang,deltax,deltay:=number
  
begin:
  N<-[[@vertices] 2]
  dim r(N,2)
  fang<-1
  if angulo<0
     fang<-(-1)
     angulo<-|angulo|
  endif
  angSen <- [.tsencos 1 angulo]*fang
  angCos <- [.tsencos 2 angulo]
  for i<-1 to N
     [.r i 1] <- (xc + ( ([.vertices i 1]-xc)* angCos ) - &
                        (([.vertices i 2]-yc)* angSen ) )
     [.r i 2] <- (yc + ( ([.vertices i 1]-xc)* angSen ) + &
                        (([.vertices i 2]-yc)* angCos ) )
  next
  vertices<-r
end


plotPoints(xc:number,yc:number,x1:number,y1:number,factor:number,simbolo:string):void
begin:
  
  at( (xc+x1) (yc+y1*factor) ); write simbolo
  at( (xc-x1) (yc+y1*factor) ); write simbolo
  at( (xc+x1) (yc-y1*factor) ); write simbolo
  at( (xc-x1) (yc-y1*factor) ); write simbolo
  at( (xc+y1) (yc+x1*factor) ); write simbolo
  at( (xc-y1) (yc+x1*factor) ); write simbolo
  at( (xc+y1) (yc-x1*factor) ); write simbolo
  at( (xc-y1) (yc-x1*factor) ); write simbolo
end
  
circulo(xc:number, yc:number, r:number,factor:number,simbolo:string):void
  x,y,p:=number
begin:
  x<-0
  y<-r
  at( xc yc ); write simbolo
  .plotPoints(xc yc x y factor simbolo)
  p<-1-r
  while x<y
     if p<0
        ++x
        p<-p+2*x+1
     else
        ++x
        --y
        p<-p+2*(x-y)+1
     endif
     .plotPoints(xc yc x y factor (simbolo))
  wend
end

pone_gran_explosion():void
  xc,yc,r,i:=number
  colores:=^number
  simbolo:=string
begin:
  xc<-15
  yc<-40
  r<-1
  colores<-^[15,15,14,14,12,12,4,4,4,5,5,1,1,8,8,0]
  i<-0
  while (++i)<=16
     color([colores i])
     if between(i 1 5)
        simbolo<-"█"
     elseif between(i 6 10)
        simbolo<-chr(223)
     elseif between(i 11 13)
        simbolo<-"*"
     else
        simbolo<-"·"
     endif
     while (++r)<20
       .circulo(xc yc r 3 (simbolo*8))
       if i=16
         millisec(130)
       elseif i<=5
        cmd(PATHs+"phoenix_cluster.wav </dev/null >/dev/null 2>&1 &")
         
         msleep(2000)
       elseif i<=7
         msleep(4500)
       endif
       ++r
     wend  
     r<-1
  wend
end

ExplotaGrande():void
begin:
   cmd(PATHs+"ExplosionHeroe.wav  </dev/null >/dev/null 2>&1 &")
   .pone_gran_explosion()
end


CalcParameters():void
begin:
   nowtime <- seconds("")             //computer real-time clock
   elt <- nowtime - t0          //elapsed time since start
   deltat <- nowtime - lastime  //loop time increment - //Delta-t//
   lastime <- nowtime
   if fuel <= 0 
       engine <- 0  //engine cannot fire without fuel
   endif
   // component x=height
   accel <- gm + engine         //add gravity to acceleration
   vel <- vel + accel * deltat   //compute new velocity
   ht <- ht + vel * deltat + 0.5 * accel * deltat^2 //and new height
   fuel <- fuel - engine * deltat / 5  //and remaining fuel

end

pone_puntos(puntos:number,ry:number,rx:number):void
  ln,s,i:=number
  sp,ss:=string
begin:
  sp<-($puntos)
  ln<-strlen(sp)
 // pone desde derecha a izquierda 
  for i<-ln downto 1
     ss<-strcpy(sp,i,1)
     if ss="."
        --rx
        at((ry+2),rx); write "."
        
     elseif ss="-"
        //--rx
        rx<--2
        at((ry+1),rx); write "_"
        
     else  // is a digit
        s<-(#ss)
        rx<-rx-3
        at(ry,    rx); write [numL1 (s+1)]
        at((ry+1),rx); write [numL2 (s+1)]
        at((ry+2),rx); write [numL3 (s+1)]
        
     endif
  next  
end


ShowCabina(danger:number):void
begin:
   color danger
   .circulo(13,39,7,1,"█")
   api "box=7,1,24,9,D"
  // api "box=20,1,25,9,D" 
   api "box=7,10,12,30,D" 
   api "box=13,10,20,30,D"
   api "box=7,48,12,68,D" 
   api "box=13,48,18,68,D" 
   api "box=7,69,19,78,D"    // NL2 
   //api "box=21,10,24,30,D"  // score
   api "box=21,60,24,78,S"  // oxigeno O 
   api "box=21,48,25,56,S"
   
//   at(23,64); write chr(195)+(chr(196)*4)+chr(180)
//   api "box=21,56,24,63,D"  // CO2  
    
   at(23,62); write "VITAL   SUPPORT"   
   
   at(12,69);  write chr(16)//">"  NL2
   at(12,78);  write chr(17)//"<"  NL2
   at(13,32);  write chr(16)//">"  LEVEL LANDING
   at(13,46);  write chr(17)//"<"  LEVEL LANDING
   api "box=2,1,5,78,D"
   at(2,39);  write chr(31)//"v"
   at(5,39);  write chr(30)//"^"
   
end

ShowHeader():void
   i:=number
begin:
//   at 2, 26      //screen location ROW , COLUMN
//   color 9
//   write "      THE F I R S T       "        //heading
//   at 3 26
//   write "  CHILEAN LUNAR LANDING   "        //heading
//   at 4 26
//   write "   CHILEAN TECHNOLOGY!    "
   .ShowCabina(12)
   at(21,39); color 12; write chr(30)
   color 95
   at(22,35); write "  LEVEL  "
   at(23,35); write " HORIZON "
   
   at(1,2); write "     BONUS LANDING MARK - BEST: VALLEY --> [ x5 ] POOR: CRATER --> [ 0 ]    "

   at(8,2);  write "  CPU  "
   at(12,2); write "  OPE  "
   at(16,2); write "  COM  "
   at(20,2); write " START "
   at(21,2); write " HANDL "
   at(22,2); write "  FLY  "
   at(21,49);write "ENG"
   at(21,53);write "NL2"
   at(21,57);write "POW"
   at(21,61);write "AIR "
   at(21,65);write "CO2"
   at(23,49);write " RESET "
   at 8, 11 ;  write "     Time (sec)    "
   at 14, 11;  write "      Fuel (%)     "
   at(18,13);  write "ENGINE------HOT"
   at 8, 49 ;  write "    Height (mts)   "
   at 14, 49;  write "   Velocity (m/s)  "
   at(8,70);   write " NL2 (%)"
   at(22,11);  write "       SCORE       " 
   at(19,49);  write "ENGINE|LIFE SYSTEMS"
   
   at(9,2); color 8  ; write "  ON "
   at(10,2);color 12 ; write "  OFF "
   
   at(13,2);color 8  ; write "  AUT  "
   at(14,2);color {(index=1)?8:10} ; write "  HND  "
   
   at(17,2);color {(index=1)?10:8} ; write "  ON "
   at(18,2);color {(index=1)?8:12} ; write "  OFF "
   
   at(23,4);color 112; write " S "
   at(22,70);color 10; write chr(219)*7
   
   color 112
   at(22,49);write " 1 "
   at(22,53);write " 2 "
   at(22,57); write " G "
   at(22,61); write " O "
   at(22,65); write " C "
   at(24,51); write " Z "
   at(20,70); color 112; write " E "
   at(20,73); color 7; write "--"
   at(20,75); color 112; write " R "
   
   color 112
   for i<-1 to 5
      at(20,[pFallas i]); write " "+[cFallas i]+" "
   next
//   at(21,49);color 7;write "│                      │"
//   color 6
//   at(21,49);        write "└──── PUSH IF FAIL ────┘"
//   at(22,49);        write "[3 secs to general fail]"
   
   at(19,26); color 8; write "■"
   
//   at 25, 33            //print instructions
//   color {(index=1)?8:15}
//   write "<S> TO START"
end


Printparams():void                    //parameter print subroutine
begin:
   color 0
   .pone_puntos(oelt,9,29)
   color 7
   .pone_puntos(elt,9,29)
   if ENGPOWER
      color 0
      .pone_puntos(ofuel,15,29)
      color 14
      .pone_puntos(fuel,15,29)
   endif
   color 0
   .pone_puntos(oht,9,67)
   color 6
   .pone_puntos(ht,9,67)
   color 0
   .pone_puntos(ovel,15,67)
   color 10
   .pone_puntos(vel,15,67)
end


ShowEngine(engine:number):void
   i:=number
begin:
   at 19, 13
   color 8
   write "||||||||||"
   
   if swEngineOn
      color 10
      i<-0
      while (i<engine); at(19,(13+i)); write "|"; ++i;wend
   endif
end

ShowOff(cColor:number):void
   i:=number
begin:
   color cColor

//   at 2, 26      //screen location ROW , COLUMN
//   write "      THE F I R S T       "        //heading
//   at 3 26
//   write "  CHILEAN LUNAR LANDING   "        //heading
//   at 4 26
//   write "   CHILEAN TECHNOLOGY!    "

   .ShowCabina(cColor)
   color cColor
   at(3,2);write pointMark
   at(4,2);write landMark
   at(21,39); write chr(30)
   at(22,35); write "  LEVEL  "
   at(23,35); write " HORIZON "

   at(1,2); write "     BONUS LANDING MARK - BEST: VALLEY --> [ x5 ] POOR: CRATER --> [ 0 ]    "

   at(8,2);  write "  CPU  "
   at(9,2);  write "  ON "
   at(10,2); write "  OFF "
   at(12,2); write "  OPE  "
   at(13,2); write "  AUT  "
   at(14,2); write "  HND  "
   at(16,2); write "  COM  "
   at(17,2); write "  ON "
   at(18,2); write "  OFF "
   at(20,2); write " START "
   at(21,2); write " HANDL "
   at(22,2); write "  FLY  "
   at(23,4); write " S "

   at(21,49);write "ENG"
   at(21,53);write "NL2"
   at(21,57);write "POW"
   at(21,61);write "AIR "
   at(21,65);write "CO2"
   at(23,49);write " RESET "
   
   at(22,49);write " 1 "
   at(22,53);write " 2 "
   at(22,57); write " G "
   at(22,61); write " O "
   at(22,65); write " C "
   at(24,51); write " Z "

   at 8, 11           //set up screen for parameter print
   write "     Time (sec)    "
   at 14, 11
   write "      Fuel (%)     "
   at(18,13); write "ENGINE------HOT"
   
   at 8, 49
   write "    Height (mts)   "
   at 14, 49
   write "   Velocity (m/s)  "
   at(19,49); write "ENGINE|LIFE SYSTEMS"
   at(8,70);   write " NL2 (%)"
   at(20,70);  write " E "
   at(20,73);  write "--"
   at(20,75);  write " R "

   for i<-1 to 5
      at(20,[pFallas i]); write " "+[cFallas i]+" "
   next
//   at(21,49); write "└──── PUSH IF FAIL ────┘"
//   at(22,49); write "[3 secs to general fail]"
   at(22,11); write "       SCORE       " 
   at(19,26); write "■"
   at(22,70); write chr(219)*7

   .pone_puntos(oelt,9,29)
   .pone_puntos(elt,9,29)
   .pone_puntos(ofuel,15,29)
   .pone_puntos(fuel,15,29)
   .pone_puntos(oht,9,67)
   .pone_puntos(ht,9,67)
   .pone_puntos(ovel,15,67)
   .pone_puntos(vel,15,67)

end

ExplotaChico(tipo:number):void
  ciclos,colores:=^number
  j,t,rret,avance,ddx:=number  
  
begin:
   //use ciclos
   //push {35, 26,  43, 57, 15}
   if tipo=0
      ciclos<-^[35, 26,  43, 57, 15]
   else
      ciclos<-^[20, 25,25, 20,30,30]
      colores<-^[176,7,177,7,219,7,178,7]
      
   endif
   
   if tipo=0
      avance<-12
   else
      avance<-17
   endif
   j<-0
   while (++j)<=5
//      mat.row j
//      ddx<-(mat.get)
      ddx<-[ciclos j]
      t<-3
      rret<-seconds("")
      if tipo=0
         cmd(PATHs+"BombExplosion.wav </dev/null >/dev/null 2>&1 &")
         .ShowOff(15)
      endif
      while t>=0
         if timer(rret,100)  //(++rret)=8000
           if tipo=0
              .ShowOff(6)
           else
              at(1,0)
              color 15
              if ZONA=32 
                 color 8
                 colores<-^[176,8,177,8,219,8,178,8]
              endif
              writmap(condorLanding colores 1 28 1 81 0)
              color 12
              api "box=4,15,8,65,"+chr(219)
              at(6,23); write "UNEVENESS LANDING -- SYSTEM FAILURE"
           endif
         
            color {t=4?15:{t=3?14:{t=2?7:{t=1?8:0}}}}
            if t=3           
               at ((avance+1) ddx )  
               write " .   ▄▀ ·  ."
               at ((avance+2) ddx )
               write "  ^ ████.▄ _"
               at ((avance+3) ddx )
               write ". ·▀ Y█.   *"
               at ((avance+4) ddx )
               write "  /   .▀ ·  "
            else
               at ((avance+1) ddx )  
               write " .    ·  .  "
               at ((avance+2) ddx )
               write "  ^  . _    "
               at ((avance+3) ddx )
               write ". ·  Y.   * "
               at ((avance+4) ddx )
               write "  /   . ·   "
                       
            endif
            //rret<-0
            --t
         endif
      wend
      if tipo=0
         .ShowOff(6)
      else
         at(1,0)
         color 15
         if ZONA=32 
            color 8
            colores<-^[176,8,177,8,219,8,178,8]
         endif
         writmap(condorLanding colores 1 28 1 81 0)
         color 12
         api "box=4,15,8,65,"+chr(219)
         at(6,23); write "UNEVENESS LANDING -- SYSTEM FAILURE"

      endif
   wend
   sleep(1)
   color 7

end

KILLPILLS(PIDPILLS:string):void
   PID:=string
begin:
   PID<- fcmd("pidof "+cPLAY)  // find all pids actives
   if strat(PIDPILLS,PID)>0   // exist PID in the list of pids?
      cmd("kill -9 "+PIDPILLS+" </dev/null >/dev/null 2>&1 &")  // bye!
   endif
end

rota_cinta := function:void
   s := string
begin:
   s<-strcpy landMark 1 1
   landMark<-(strcpy landMark 2 76)+s

   s<-strcpy pointMark 1 1
   pointMark<-(strcpy pointMark 2 76)+s
end

rota_d_cinta := function:void
   s := string
begin:
   s<-strcpy landMark 76 1
   landMark<-s+(strcpy landMark 1 75)

   s<-strcpy pointMark 76 1
   pointMark<-s+(strcpy pointMark 1 75)
end

pone_luna():void
   cLight,cDark:=number
begin:
   cLight<-15
   cDark<-8
   color(cLight)
   at(17 10);."                     .------";color cDark;."--------.";color cLight
   at(18 10);."                .---'  o      ";color cDark;."  .    `---.";color cLight
   at(19 10);."             .-'    .    O  .   ";color cDark;."      .   `-.";color cLight
   at(20 10);."          .-'     @@@@@@       .";color cDark;."             `-.";color cLight
   at(21 10);."        .'@@   @@@@@@@@@@@       @";color cDark;."@@@@@@   .    `.";color cLight
   at(22 10);."      .*@@@  @@@@@@@@@@@@@@     @@@@";color cDark;."@@@@@         `.";color cLight
   at(23 10);."     /@@@  o @@@@@@@@@@@@@@     @@@@@";color cDark;."@@@@     O     \\";color cLight
   at(24 10);."    /        @@@@@@@@@@@@@@  @   @@@@";color cDark;."@@@@@ @@     .  \\";color cLight
   at(25 10);."   /@  o      @@@@@@@@@@@   .  @@  @@@";color cDark;."@@@@@@@@     @@ \\";color cLight
   at(26 10);."  /@@@      .   @@@@@@ o       @  @@@@";color cDark;."@@@@@@@@@ o @@@@ \\";color cLight
   at(27 10);." /@@@@@                  @ .      @@@@@";color cDark;."@@@@@@@@@  @@@@@ \\";color cLight
end


ShowScore(tipo:number):void
  bfuel:=number
  bc:=number
begin:
   .pone_luna()
   color 10
   precision 0
   .pone_msg( "                S U M M A R Y",2,15,true)
   bfuel<-mth.ceil(fuel)
   .pone_msg(("S C O R E.................................."+($PUNTOS)),4,15,true)
   .pone_msg(("B O N U S  F U E L........................."+($bfuel)+" x 10"),6,15,true)
   .pone_msg(("B O N U S  L A N D I N G  Z O N E.........."+($bonoCinta)),8,15,true)
   .pone_msg(("B O N U S  L A N D I N G..................."+($BONO)),10,15,true)
   if bonoCinta>0
      bc<-bfuel*10*bonoCinta
   else
      bc<-bfuel*10
   endif   
   PUNTOS<-PUNTOS+bc+BONO
   
   color 14
   .pone_msg(("F I N A L  S C O R E......................."+($PUNTOS)),12,15,true)
   sleep(3)
   if tipo
      .pone_msg("         PRESS ANY KEY TO NEXT MISION",15,15,true)
   endif
//   flush()
   pause
   precision 1
end

PowOff():void
begin:
   PIDPROXIMO<- fcmd("pidof "+cPLAY)  // apaga todo
   cmd("kill -9 "+PIDPROXIMO+" </dev/null >/dev/null 2>&1 &")
   // APAGA TODOOOO
   cmd(PATHs+"lunar_cierre_comm.wav </dev/null >/dev/null 2>&1 &")
   .ShowOff(8)
   color 0
   .vdraw(aguja)
   .pone_puntos(oelt,9,29)
   .pone_puntos(elt,9,29)
   .pone_puntos(ofuel,15,29)
   .pone_puntos(fuel,15,29)
   .pone_puntos(oht,9,67)
   .pone_puntos(ht,9,67)
   .pone_puntos(ovel,15,67)
   .pone_puntos(vel,15,67)
            
   engine<-0
   POWER<-false
   PIDENGINE<-""
   PIDCO2<-PIDERR0<-PIDERR90<-""
   tRecover<-seconds("")
end

PowENGOff(tipo:number):void
begin:
   at(18,13); color 8; write "ENGINE------HOT"
   at(19,26);          write "■"
   at 19, 13;        ; write "||||||||||"
   //at(20,[pFallas tTmp]);color 8; write " "+[cFallas tTmp]+" "
   if tipo=1
      if strlen(PIDENGINE)>0
         .KILLPILLS(PIDENGINE)
         PIDENGINE<-""
      endif
      if strlen(PIDOVERLOAD)>0
         .KILLPILLS(PIDOVERLOAD)
         PIDOVERLOAD<-""
      endif
      engine<-0
      levelOvl<-10
      {swDanger,ENGPOWER}<-false
   endif
end

PowNL2Off():void
   colores:=^number
begin:
   swGas<-false
   api "box=7,69,19,78,D"    // NL2 
   colores<-^[178,8,205,8,196,8,219,8,220,8]
   
   at(9,70); color(8)
   writmap(mapa colores  pGas (pGas+9) 1 8 0)
   use colores; drop
end

ChequeaNL2(c:number):void
  PIDNL21:=string
begin:
   room swNL2
      if (fuel between  60 90)   // si esta en este rango para Oxigeno
         if mth.ceil(mth.rand(100)) = 50
            {swIniNL2,swNL2,tNL2}<-{true,false,seconds("")}
         endif
      endif
   rend
   room swIniNL2
      if timer(tNL2,1000)
         if (++cntNL2)=3
            at(22,53);color 79; write " 2 "
         
            cmd(PATHs+"lunar_alarma_little.wav </dev/null >/dev/null 2>&1 &")
            PIDNL21 <- fcmd("pidof "+cPLAY)
            nPills<-strntok((flag " ") PIDNL21)
            PIDNL21<-strtok(PIDNL21 1)
         
            {swIniNL2,swNL2Hard,cntNL2,swNL2Meter,tNL2}<-{false,true,0,true,seconds("")}
         else
            color {swNL2Meter?96:112}
            not swNL2Meter
            at(22,53);write " 2 "
         endif
      endif
      if c = 50
         at(22,53); color 112; write " 2 "
         {swIniNL2,swNL2Hard}<-{false,false}
      endif 
   rend
   room swNL2Hard
      if timer(tNL2,1000)
         if (++cntNL2)=3   // error silencioso. Sistema se apaga completamente, y la nave sigue cayendo
            swNL2Hard<-false
            at(22,53); color 7; write " 2 "
            
            {swReset,swOnReset}<-true
            cmd(PATHs+"lunar_cierre_comm.wav </dev/null >/dev/null 2>&1 &")
            .KILLPILLS(PIDNL21)
            .PowNL2Off()
            tReset<-seconds("")
         else
            color {swNL2Meter?79:112}
            not swNL2Meter
            at(22,53);write " 2 "
         endif
      endif
      if c = 50
         at(22,53); color 112; write " 2 "
         .KILLPILLS(PIDNL21)
         {swNL2Hard,swNL2}<-{false,false}
      endif 
   rend
end

ChequeaENGINE(c:number):void
  PIDENG1:=string
begin:
   room swENG
      if (fuel between 50 70)   // si esta en este rango para Oxigeno
         if mth.ceil(mth.rand(100)) = 50
            {swIniENG,swENG,tENG}<-{true,false,seconds("")}
         endif
      endif
   rend
   room swIniENG
      if timer(tENG,1000)
         if (++cntENG)=3
            at(22,49);color 79; write " 1 "
         
            cmd(PATHs+"lunar_alarma_little.wav </dev/null >/dev/null 2>&1 &")
            PIDENG1 <- fcmd("pidof "+cPLAY)
            nPills<-strntok((flag " ") PIDENG1)
            PIDENG1<-strtok(PIDENG1 1)
         
            {swIniENG,swENGHard,cntENG,swENGMeter,tENG}<-{false,true,0,true,seconds("")}
         else
            color {swENGMeter?96:112}
            not swENGMeter
            at(22,49);write " 1 "
         endif
      endif
      if c = 49
         at(22,49); color 112; write " 1 "
         {swIniENG,swENGHard}<-{false,false}
      endif 
   rend
   room swENGHard
      if timer(tENG,1000)
         if (++cntENG)=3   // error silencioso. Sistema se apaga completamente, y la nave sigue cayendo
            swENGHard<-false
            at(22,49); color 7; write " 1 "
            {swReset,swOnReset}<-true
            cmd(PATHs+"lunar_cierre_comm.wav </dev/null >/dev/null 2>&1 &")
            .KILLPILLS(PIDENG1)
            .PowENGOff(1)
            tReset<-seconds("")
         else
            color {swENGMeter?79:112}
            not swENGMeter
            at(22,49);write " 1 "
         endif
      endif
      if c = 49
         at(22,49); color 112; write " 1 "
         .KILLPILLS(PIDENG1)
         {swENGHard,swENG}<-{false,false}
      endif 
   rend

end

ChequeaPOW(c:number):void
   PIDPOW1:=string
begin:
   room swPOW
      if (fuel between 70 90)   // si esta en este rango para Oxigeno
         if mth.ceil(mth.rand(100)) = 50
            {swIniPOW,swPOW,tPOW}<-{true,false,seconds("")}
         endif
      endif
   rend
   room swIniPOW
      if timer(tPOW,1000)
         if (++cntPOW)=30
            at(22,57);color 79; write " G "
            cmd(PATHs+"lunar_alarma_little.wav </dev/null >/dev/null 2>&1 &")
            PIDPOW1 <- fcmd("pidof "+cPLAY)
            nPills<-strntok((flag " ") PIDPOW1)
            PIDPOW1<-strtok(PIDPOW1 1)
         
            {swIniPOW,swPOWHard,cntPOW,swPOWMeter,tPOW}<-{false,true,0,true,seconds("")}
         else
            color {swPOWMeter?96:112}
            not swPOWMeter
            at(22,57);write " G "
         endif
      endif
      if c = 103
         at(22,57); color 112; write " G "
         {swIniPOW,swPOWHard}<-{false,false}
      endif 
   rend
   room swPOWHard
      if timer(tPOW,1000)
         if (++cntPOW)=5   // error silencioso. Sistema se apaga completamente, y la nave sigue cayendo
            swPOWHard<-false
            at(22,57); color 7; write " G "
            .KILLPILLS(PIDPOW1)
            .PowOff()
         else
            color {swPOWMeter?79:112}
            not swPOWMeter
            at(22,57);write " G "
         endif
      endif
      if c = 103
         at(22,57); color 112; write " G "
         .KILLPILLS(PIDPOW1)
         {swPOWHard,swPOW}<-{false,false}
      endif 
   rend
end


ChequeaCO2(c:number):void
   PIDCO21:=string
begin:
   room swCO2
      if (fuel between 30 50) // si esta en este rango para Oxigeno
         if mth.ceil(mth.rand(100)) = 50
            {swIniCO2,swCO2,SupColor,tCO2}<-{true,false,6,seconds("")}
         endif
      endif
   rend
   room swIniCO2
      if timer(tCO2,1000)
         if (++cntCO2)=30
            at(22,65);color 79;write " C "
            cmd(PATHs+"lunar_alarma_little.wav </dev/null >/dev/null 2>&1 &")
            PIDCO21 <- fcmd("pidof "+cPLAY)
            nPills<-strntok((flag " ") PIDCO21)
            PIDCO21<-strtok(PIDCO21 1)
            {swIniCO2,swCO2Hard,cntCO2,SupColor,swCO2Meter,tCO2}<-{false,true,0,12,true,seconds("")}
         else
            color {swCO2Meter?96:112}
            not swCO2Meter
            at(22,65);write " C "
         endif
      endif
      if c = 99
         at(22,65); color 112; write " C "
         {swIniCO2,swCO2,SupColor}<-{false,true,10}
      endif 
   rend
   room swCO2Hard
      if timer(tCO2,1000)
         if (++cntCO2)=5   // error silencioso. Simplemente, quedas out!
            at(22,65); color 79; write " C "
            {swCO2Hard,swOk}<-false
         else
            color {swCO2Meter?79:112}
            not swCO2Meter
            at(22,65);write " C "
         endif
      endif
      if c = 99
         at(22,65); color 112; write " C "
         .KILLPILLS(PIDCO21)
         PIDCO21<-""
         {swCO2Hard,swCO2,SupColor}<-{false,false,10}
      endif 
   rend
end

ChequeaOxigeno(c:number):void
   PIDOXI1:=string
begin:
   room swOxigeno
      if (fuel between 60 80)  //50 60   // si esta en este rango para Oxigeno
         if mth.ceil(mth.rand(100)) = 50
            {swIniO,swOxigeno,SupColor,tOxigeno}<-{true,false,6,seconds("")}
         endif
      endif
   rend
   room swIniO
      if timer(tOxigeno,1000)
         if (++cntOxigeno)=30
            at(22,61); color 79;write " O "
            cmd(PATHs+"lunar_alarma_little.wav </dev/null >/dev/null 2>&1 &")
            PIDOXI1 <- fcmd("pidof "+cPLAY)
            nPills<-strntok((flag " ") PIDOXI1)
            PIDOXI1<-strtok(PIDOXI1 1)
            {swIniO,swOHard,cntOxigeno,SupColor,swOMeter,tOxigeno}<-{false,true,0,12,true,seconds("")}
         else
            color {swOMeter?96:112}
            at(22,61); write " O "
            not swOMeter
         endif
      endif
      if c = 111
         at(22,61); color 112; write " O "
         {swIniO,swOxigeno,SupColor}<-{false,true,10}
      endif   
   rend
   room swOHard
      if timer(tOxigeno,1000)
         if (++cntOxigeno)=5   // error silencioso. Simplemente, quedas out!
            {swOHard,swOk}<-false
            at(22,61); color 79; write " O "
         else
            color {swOMeter?79:112}
            at(22,61); write " O "
            not swOMeter
         endif
      endif
      if c = 111
         at(22,61); color 112; write " O "
         .KILLPILLS(PIDOXI1)
         PIDOXI1<-""
         {swOHard,swOxigeno,SupColor}<-{false,false,10}
      endif   
   rend
end

otravez():boolean
colx,c:=number
s:=string
ret:=boolean
begin:
  cls
  color(6)
  api "box=12,24,18,56,D"
  color 14
  colx<-30
  at(14 colx); ." ▄   ▄▄  ▄  ▄  ▄   ▄"
  at(15 colx); ."█▄█ █ ▄ █▄█ ▄ █ █ ▀ █"
  at(16 colx); ."▀ ▀  ▀▀ ▀ ▀ ▀ ▀ ▀  ▄"
  c<-0
  flush()
  while c=0
    readkey(c)
    s<-strupper(chr(c))
    if s="S" or s="Y"
       ret<- true
       break
    elseif s="N"
       ret<- false
       break
    endif
  wend
  cls
  return ret
end

HardLanding():void
  colores,condor5:=^number
  x,i,t0,t1:=number
  sw1:=boolean
begin:
  cls
  mat.load((flag ",") condor5 (PATH+"hardlanding.map" ) )
  colores<-^[176,7,177,7,219,7,178,7]

  at(1,0)
  color 15
  if ZONA=32 
     color 8
     colores<-^[176,8,177,8,219,8,178,8]
  endif
  writmap(condor5 colores 1 28 1 81 0)
  
//  api "box=4,15,8,65,"+chr(219)
    
  i<-0
  swDanger<-true
  while i<11
     if swDanger
        color 12
     else
        color 15
     endif
     not swDanger
     //msleep(90000)
      millisec(300)
      api "box=4,15,8,65,"+chr(219)
      at(6,25); write "HARD LANDING -- SYSTEM FAILURE"
      
     ++i
  wend
  cmd(PATHs+"lunar_hard_landing.wav </dev/null >/dev/null 2>&1 &")
  millisec(2100)
  x<-45;i<-1
  sw1<-true
  color 15
  at(17,35); write "X▄▌█"
  t0<-seconds("")
  t1<-seconds("")
  while x<74
    if timer(t0,30)
       if i<3 or i=12
          if i=12
             color 0
             i<-1
             --x
             at(16,x); write "    \\ __"
             at(17,x); write "     ▄"
             at(18,x); write " __O▀ "
             ++x
             color 15
          endif
          at(16,x); write "  \ O__"
          at(17,x); write " __█"
          at(18,x); write "    \\"
       elseif i>=3 and i<6
          if i=3
             color 0
             --x
             at(16,x); write "  \ O__"
             at(17,x); write " __█"
             at(18,x); write "    \\"
             ++x
          endif
          color 15
          at(16,x); write " \\  / "
          at(17,x); write "  ▀▄O"
          at(18,x); write " / / "
       elseif i>=6 and i<9
          if i=6
             color 0
             --x
             at(16,x); write " \\  / "
             at(17,x); write "  ▀▄O"
             at(18,x); write " / / "
             ++x
             color 15
          endif
          at(16,x); write "  \\\\"
          at(17,x); write " __█/"
          at(18,x); write "   O "
       elseif i>=9 and i<12
          if i=9
             color 0
             --x
             at(16,x); write "  \\\\"
             at(17,x); write " __█/"
             at(18,x); write "   O "
             ++x
             color 15
          endif
          at(16,x); write "    \\ __"
          at(17,x); write "     ▄"
          at(18,x); write " __O▀ "
       endif
       
       ++x
       ++i
       i<-12, if i>12
    endif
    room sw1
       if timer(t1,10)
          at(17,35); color 6;write "XXXXXX";color 12;."▄▌█"
          sw1<-false
       endif
    rend
    if x=74
       at(16,x); write "         "
       at(17,x); write "         "
       at(18,x); write "         "
    endif  
  wend
  use condor5; drop
  use colores; drop
  cls //sleep(1)
end

UnevenLanding():void
  swDanger:=boolean
  i:=number
  colores:=^number
begin:

  cls
  mat.load((flag ",") condorLanding (PATH+"unevenlanding.map" ) )
  colores<-^[176,7,177,7,219,7,178,7]

  swDanger<-true
  i<-0
  while i<5
     if swDanger
        .ShowOff(8)
     else
        .ShowOff(6)
     endif
     not swDanger
     ++i
     color 15
     millisec(100)
  wend
  sleep(1)
  cls
  at(1,0)
  color 15
  if ZONA=32 
     color 8
     colores<-^[176,8,177,8,219,8,178,8]
  endif
  
  writmap(condorLanding colores 1 28 1 81 0)
  i<-0
  swDanger<-true
  while i<11
     if swDanger
        color 12
     else
        color 15
     endif
     not swDanger 
     //msleep(90000)
     millisec(300)
     api "box=4,15,8,65,"+chr(219)
     at(6,23); write "UNEVENESS LANDING -- SYSTEM FAILURE"
     ++i
  wend
  
  .ExplotaChico(1)
  use colores; drop
  use condorLanding; drop
end

SoftLanding():void
  i,j,t0:=number
  swDanger:=boolean
  colores,condor5:=^number
  PID:=string
begin:

  cls
  mat.load((flag ",") condor5 (PATH+"softlanding.map" ) )
  colores<-^[176,7,177,7,219,7,178,7,222,9,221,15,186,12]
  at(1,0)
  color 15
  if ZONA=32 
     color 8
     colores<-^[176,8,177,8,219,8,178,8]
  endif
  cmd(PATHs+"lunar_intro.wav </dev/null >/dev/null 2>&1 &")
  PID<- fcmd("pidof "+cPLAY)
  nPills<-strntok((flag " ") PID)
  PID<-strtok(PID 1)
  
  writmap(condor5 colores 1 28 1 81 0)
  
   i<-0; j<-0
   swDanger<-true
   while i<183
      if timer(t0,1000)
         color 14
         if j=1
            at(19,50);.".:"
         elseif j=2
            at(18,50);."  .·"
         elseif j=3
            at(17,50);color 15;."/";color 14;."  º."
         elseif j=4
            at(16,50);."  . º"
         elseif j=5
            at(15,50);."    oº."
         elseif j=6
            at(14,50);."     coº."
         elseif j=7
            at(13,50);."    (o.) O·:"
         elseif j=8
            at(12,50);."    ( c( ) ( )"
         endif
         ++j
      endif
      if swDanger
         color 10
      else
         color 15
      endif
      not swDanger
      //msleep(90000)
         
      millisec(100)
      api "box=4,15,8,65,"+chr(219)
      at(6,20); write "SOFT LANDING SUCCEFULLY - CONGRATULATIONS"
      ++i
   wend
   .KILLPILLS(PID)
end

//ComputeHVEL():number
//begin:
//   
//end
//
vars:
  TITULOS:=$1:string   // -not = sin titulos
  start,engine,gm,ht,cteHT,fuel,nPills:= number
  condorLanding:=^number
  oht,ofuel,ovel,oelt,i,k:= number
  t0,lastime,etime,tTmp:=number
  levelOvl,ctaReset,timeOvl,timeDanger,tiempo:=number
  swovl,swTimeOvl,swDanger,swExplota,swE,swR,swGas,swOnR:=boolean
  swIzq,swDer,swEngineInit:=boolean
  nowtime,accel,c, deltat,elt,vel:=number
  aguja,tsencos,taguja:=^number
  numL1,numL2,numL3:=^string
  PATH,PATHs,cSYS,cPLAY,cTMP:=string
  PIDENGINE,PIDPROXIMO,PIDERR0,PIDERR90,PIDOVERLOAD,PIDMENSAJE:=string
  cntIzq,cntDer,timeIzq,timeDer,anguloF,pGas,tGas,tComFail,tIniMsg,tReload,tMsgNoOff:=number
  tLevelOn,tEngineOn,tNumbersOn,tAUTO,tStartOn:=number
  swIzq,swDer,swAlarmProx,swErr0,swErr90,swInicio,swOnGas,swComFail,swIniMsg,swReload,swMsgNoOff:=boolean
  swLevelOn,swEngineOn,swNumbersOn,swAUTO,swStartOn:=boolean
  cFallas,cPIDFAIL:=^string
  PIDFAIL,PIDCO2:=string
  pFallas,pTime,kFallas,timeLitErr,timeCut:=^number
  bFallas,swFallas:=^boolean
  mapa,coloresMap,condor5:=^number
  BONO,PUNTOS,ZONA,MOTIVO,velCinta,bonoCinta,index:=number
  landMark,pointMark:=string
  swSupMeter:=boolean
  tSupport,SupColor:=number
  tCinta:=^number
  DIR,VELH:=number
  swReset,swOnReset,swOnCinta,swAjusteCinta:=boolean
  tReset:=number
  CINTA:=number
//  oxigeno,co2:=number

// NL2 =1
  swNL2Meter:=boolean
  cntNL2,tNL2:=number
  swNL2,swIniNL2,swNL2Hard:=boolean

// ENGIGE =1
  swENGMeter:=boolean
  cntENG,tENG:=number
  swENG,swIniENG,swENGHard:=boolean
// oxigeno
  swOMeter:=boolean
  cntOxigeno,tOxigeno:=number
  swOk,swOxigeno,swIniO,swOHard:=boolean
// CO2
  swCO2Meter:=boolean
  cntCO2,tCO2:=number
  swCO2,swIniCO2,swCO2Hard:=boolean
// POW
  swPOWMeter,POWER:=boolean
  cntPOW,tPOW,tRecover:=number
  swPOW,swIniPOW,swPOWHard:=boolean
  ENGPOWER:=boolean

algorithm:

 PATH<-getenv("PATH_XU")
 if strlz(PATH)
    ."\nNo encuentro variable de entorno PATH_XU\n\n"
    ."Necesito que declares PATH_XU=ruta-donde-esta-xu\n"
    goodbye
 else
   /* esta ruta accederá a todos los recursos del
      juego, dentro de SOURCE */
    PATH<-PATH+"/source/dataLunar/"
    
 endif

 // chequeo de sistema operativo
 cSYS<-strupper(strcpy(system(),1,strat((flag "L")" ",system()) ))
 
 cSYS<-strtrim((flag "A")cSYS ) 
 if cSYS = "DARWIN"
    cPLAY<-"afplay"
 elseif cSYS="LINUX"
    cPLAY<-"aplay"
 else
    // puede que windows, cuando lo tenga listo
    ."Problemas... [",cSYS,"]"
    goodbye
 endif
 PATHs<-cPLAY+" "+PATH // deja "afplay /home..../source/"

// Lunar Lander Simulation   

//numL1<-^["┌┐","┐","┌┐","┌┐","┐┐","┌┐","┌┐","┌┐","┌┐","┌┐"]
//numL2<-^["││","│","┌┘",".┤","└┤","└┐","├┐",".│","├┤","└┤"]
//numL3<-^["└┘","┴","└┘","└┘",".┘","└┘","└┘",".┴","└┘","└┘"]
//  ┌┐┐┌┐┌┐┐┐┌┐┌┐┌┐┌┐┌┐  
//  │││┌┘ ┤└┤└┐├┐ │├┤└┤
//  └┘┴└┘└┘ ┘└┘└┘ ┴└┘└┘
//numL1<-^[" _ ", "   ", " _ ", " _ ","   "," _ "," _ "," _ "," _ "," _ "]
//numL2<-^["| |", "  |", " _|", " _|","|_|","|_ ","|_ ","  |","|_|","|_|"]
//numL3<-^["|_|", "  |", "|_ ", " _|","  |"," _|","|_|","  |","|_|"," _|"]

numL1<-^["._.", "...", "._.", "._.","...","._.","._.","._.","._.","._."]
numL2<-^["| |", "..|", "._|", "._|","|_|","|_.","|_.","..|","|_|","|_|"]
numL3<-^["|_|", "..|", "|_.", "._|","..|","._|","|_|","..|","|_|","._|"]
//
numL1<-strchg(numL1,"."," ")
numL2<-strchg(numL2,"."," ")
numL3<-strchg(numL3,"."," ")

timeCut<-^[0,500,1000,1500,2000,2250,2500]//,2700,2750]  // substract initial time


precision 1
cursor 0
cls
video(27,80)

//bonoCinta<-2
//fuel<-45.6
//PUNTOS<-0
//BONO<-100
//.ShowScore(1)
//write .otravez()
//stop

if TITULOS<>"-not"
   .titulo()
endif

while 1
index<-1        // index cut initial time
PUNTOS<-0
while 1    // loop main

   {PIDENGINE,PIDPROXIMO,PIDERR0,PIDERR90,PIDOVERLOAD,PIDMENSAJE,PIDFAIL,PIDCO2,cPIDFAIL,cTMP}<-""
   cFallas<-^["P","W","N","S","F"]
   pFallas<-^[ 49,53,57,61,65 ]
   bFallas<-^[true, true, true, true, true]  // fail latency is on
   swFallas<-^[true, true, true, true, true]  //^[false,false,false,false,false]  // room sw
   kFallas<-^[112,119,110,115,102]     // key fail
   cPIDFAIL<-^["","","","",""]
   
   {ht,tTmp,cteHT} <- FUEL-[timeCut index]   //500//300 //1500               //1.5 km = 1,500 metres
   tCinta<-mth.ceil([=60,2000,30])
   DIR<-1
   VELH<-1
//   tCinta<-mth.ceil([=1,400,ht])
//   sort((flag "D")tCinta, 1 "N" 0 0)
//   DIR<-0
   
   MOTIVO<-0
   //cls               // clear screen
        .ShowHeader()
        .ShowEngine(0)
        color(15); .pone_puntos(ht,9,67)
        
        if index=1
            at(9,2); color 10  ; write "  ON "
            at(10,2);color 8 ; write "  OFF "
        endif
   
       /* at(23,12); */color 12; precision 0;.pone_puntos({(PUNTOS>99999)?99999:PUNTOS},23,29);precision 1   //write strpad((flag "R ") PUNTOS 17) 
   // gaugi de CO2
        coloresMap<-^[178,4,205,120,196,112,219,2,220,12]
        mat.load((flag ",") mapa (PATH+"co2.map") )
        pGas<-1
        {swE,swR}<-false
        at(9,70); color(15)
        writmap(mapa coloresMap pGas (pGas+9) 1 8 0)
   // land and points mark
   pointMark<- "TER      x2            x3        x4  x5  x4        x3            x2      CRA"
   landMark <- "   ░░░░░░░░░░░░░░░▒▒▒▒▒▒▒▒▒▒▒▒▓▓▓▓▓▓▓██▓▓▓▓▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒░░░░░░░░░░░░░░░   "   //64
   //write strlen(landMark); stop
   at(3,2);write pointMark
   at(4,2);write landMark

   // fallas
   color 120
   dim timeLitErr(5)
   dim pTime(5)
   for i<-1 to 5
   //   at(20,[pFallas i]); write " "+[cFallas i]+" "
      tTmp<-tTmp\2     // distrib half time of half time, simuling logarithm space time
      while true
         k<-mth.ceil(mth.rand(5))  // choose fail. if exist, choose another.
         if [swFallas k]///[pTime k]
            [pTime k]<-tTmp
            [swFallas k]<-false
            break   // out of while
         endif
      wend
   ///   at(22,1+(i*5));write [pTime i],"-"   //only to view proof
   next
   // tTmp = index error
   tTmp<-0

//   color 7
   //define initial parameters
   start <- 0               //start flag - must press //s// to start
   engine <- 0              //thrust accel - currently zero (engine off)
   gm <- (-1.62)            //lunar gravitational acceleration. Mars: -3.7
   vel<-0
   fuel <- 100              //100% fuel
   lastime<-0
   c<-0
   
   {swovl,swOk,swGas}<-true
   
   swInicio<-{{(index=1)?false:true}}
   swComFail<-{{(index=1)?true:false}}  // falla comunicaciones a 2 segundos del descenso
   swIniMsg<-{{(index=1)?true:false}}
   {swIzq,swDer,swTimeOvl,swExplota,swDanger,swAlarmProx}<-false
   {swErr0,swErr90,swR,swE,swOnR,swOnGas,swReload}<-false
   {swLevelOn,swEngineOn,swNumbersOn,swAUTO,swStartOn,swOnCinta}<-true
   {swIniO,swOHard,swIniCO2,swCO2Hard,swIniPOW,swPOWHard,swAjusteCinta}<-false
   {swReset,swOnReset}<-false
   tReset<-0
   {swOMeter,swCO2Meter,swSupMeter,swPOWMeter,swENGMeter,swNL2Meter}<-true
   
   {swCO2,swPOW,swOxigeno,swENG,swNL2}<-true
   
   SupColor<-10
   {cntOxigeno,cntCO2,cntPOW,cntENG,cntNL2}<-0
   {POWER,ENGPOWER}<-true
   
   levelOvl<-10
   

   anguloF<-90
   tsencos<-.precalculo()
   color 11
   aguja <- .vpoligono(2 13 39 5)
   //.rotacion(aguja 13 39 90)
   .vdraw(aguja)
   keyput(256,1)
   color 7
   if index=1
       cmd(PATHs+"lunar_cierre_comm.wav </dev/null >/dev/null 2>&1 &")
       at(9,2); color 8  ; write "  ON "
       at(10,2);color 12 ; write "  OFF "
       
   endif
   cmd(PATHs+"lunar_inicie_descenso.wav </dev/null >/dev/null 2>&1 &"), if index=1
   swMsgNoOff<-false
   if index=1
      tMsgNoOff<-seconds("")
      swMsgNoOff<-true
      tAUTO<-seconds("")
      tStartOn<-seconds("")
   endif
   velCinta<-seconds("")  // velocidad inicial de llegada a la luna
   //main simulation loop
   do
     readkey(c),if swOk                    //sample keyboard for keypress
     room swMsgNoOff
        if timer(tMsgNoOff,5000)
           swMsgNoOff<-false
           swInicio<-true
        endif
     rend
     room swInicio
        if timer(tStartOn,300)
          color {swStartOn?47:120}
          not swStartOn
          at(23,4); write " S "
        endif
     
        if strlower(chr(c)) = "s"
              start <- 1
              t0 <- seconds("")
              lastime <- t0  // start simulation
              cmd(PATHs+"lunar_vector_descenso.wav </dev/null >/dev/null 2>&1 &"),if index=1
              at(23,4); color 120; write " S "
              at(13,2);color 8  ; write "  AUT  "
              at(14,2);color 10 ; write "  HND  "
              
              swInicio<-false
          
              tIniMsg<-seconds(""),if index=1
              tiempo<-seconds("")
              velCinta<-seconds("")
              tComFail<-seconds(""),if index=1
              tSupport<-seconds("")
              CINTA<-seconds("")
        endif
     rend
     room swReset  // activa reset como salida a apagón de engine y/o CO2
        if timer(tReset,500)
           color {swOnReset?47:112}
           not swOnReset
           at(24,51); write " Z "
        endif
     rend
     if start              //if simulation is started
       room POWER   // system is ON
          room ENGPOWER   // motores ON
             room swEngineOn
                if timer(tiempo,1000)
                   color {swovl?8:levelOvl}
                   not swovl
                   at(19,26);write "■"
                endif
             rend
             if c = 5             //turn engine on incremento
               ++engine
         //      levelOvl<-10   // dejando esto aquí asomaba un error de logica monumental: desaparece señal pero conteo sigue
               if engine=1   // inicia el motor
                  if strlen(PIDENGINE)=0
                     swEngineInit<-true
                  endif
               elseif engine>10
                  engine<-10
               elseif engine>=5
                  if ~swDanger
                     levelOvl<-12
                     swDanger<-true

                     cmd(PATHs+"lunar_alarma_engine_overload.wav </dev/null >/dev/null 2>&1 &")
         //            sleep(1)
                     PIDOVERLOAD<- fcmd("pidof "+cPLAY)
                     nPills<-strntok((flag " ") PIDOVERLOAD)
                     PIDOVERLOAD<-strtok(PIDOVERLOAD 1)
                     timeDanger<-seconds("")
                  endif
               endif
               etime <- seconds("")        //engine acceleration = 10 m/s/s
               .ShowEngine(engine)
             elseif c = 24             //turn engine on decremento
               --engine
               if engine<1
                  engine<-0
                  if strlen(PIDENGINE)>0  
                      .KILLPILLS(PIDENGINE)
                      PIDENGINE<-""
                  endif
               endif
               if swDanger //levelOvl=12
                  if engine<5
                     {swTimeOvl,swDanger,ctaReset}<-{true,false,3}
                     if strlen(PIDOVERLOAD)>0
                        .KILLPILLS(PIDOVERLOAD)
                        PIDOVERLOAD<-""
                     endif
                     timeOvl<-seconds("")
                  endif
               endif
               .ShowEngine(engine)
               etime <- seconds("")        //engine acceleration = 10 m/s/s
             endif
          rend // ENGPOWER
          
          // Show vital support signal: if red=astronaut dead
          room timer(tSupport,400)
             color {swSupMeter?8:SupColor}
             not swSupMeter
             at(22,70);write "███████"
          rend
          // define time error line 1
          for tTmp<-1 to 5
             if [bFallas tTmp]   // if error is active
                if mth.int(ht) = [pTime tTmp]  //between (([pTime tTmp]-1),([pTime tTmp]+1))
                   [swFallas tTmp]<-true    // active this error in play
                   [bFallas tTmp]<-false   // desactive this error in program
                   cmd(PATHs+"lunar_alarma_little.wav </dev/null >/dev/null 2>&1 &")
                   PIDFAIL <- fcmd("pidof "+cPLAY)
                   nPills<-strntok((flag " ") PIDFAIL)
                   [cPIDFAIL tTmp]<-strtok(PIDFAIL 1)
                   at(20,[pFallas tTmp]);color 79; write " "+[cFallas tTmp]+" "
                   [timeLitErr tTmp]<-seconds("")
                endif
             endif
             room [swFallas tTmp]
                ///at(22,40); write c," - ",[kFallas tTmp]
                if c = [kFallas tTmp]   // press the key error?
                   [swFallas tTmp]<-false    // desactive error: all OK!!
                   .KILLPILLS([cPIDFAIL tTmp])
                   [cPIDFAIL tTmp]<-""
                   at(20,[pFallas tTmp]);color 120; write " "+[cFallas tTmp]+" "
                else    // eval deadline error
                   if timer([timeLitErr tTmp],3000)   // 3 seconds
                      // checking fail type:
                      //P & W = boom!
                      //    S = time,height,fuel & vel OFF  5 sec life suport (solo visualizador)
                      //    N = ENGINE OFF  5 sec     (solo visualizador)
                      //    F = level horizon & landing mark OFF 5 sec.  (solo visualizador)
                      cTMP<-[cFallas tTmp]
                      if cTMP="P" or cTMP="W"
                         swExplota<-true   // bye astronaut!!
                         MOTIVO<-2
                         break
                      elseif cTMP="F"
                         [swFallas tTmp]<-false    // desactive error
                         cmd(PATHs+"lunar_cierre_comm.wav </dev/null >/dev/null 2>&1 &")
                         color 8;.circulo(13,39,7,1,"█")
                         .vdraw(aguja)
                         swLevelOn<-false
                         .KILLPILLS([cPIDFAIL tTmp])
                         [cPIDFAIL tTmp]<-""
                         at(20,[pFallas tTmp]);color 8; write " "+[cFallas tTmp]+" "
                         tLevelOn<-seconds("")
                      elseif cTMP="N"
                         [swFallas tTmp]<-false    // desactive error
                         cmd(PATHs+"lunar_cierre_comm.wav </dev/null >/dev/null 2>&1 &")
                         .KILLPILLS([cPIDFAIL tTmp])
                         [cPIDFAIL tTmp]<-""
                         swEngineOn<-false
                         .PowENGOff(0)
//                         swEngineOn<-false
//                         at(18,13); color 8; write "ENGINE------HOT"
//                         at(19,26);          write "■"
//                         at 19, 13;        ; write "||||||||||"
//                         at(20,[pFallas tTmp]);color 8; write " "+[cFallas tTmp]+" "
                         //PIDENGINE<-""
                         tEngineOn<-seconds("")
                      elseif cTMP="S"
                         [swFallas tTmp]<-false    // desactive error
                         cmd(PATHs+"lunar_cierre_comm.wav </dev/null >/dev/null 2>&1 &")
                         .KILLPILLS([cPIDFAIL tTmp])
                         [cPIDFAIL tTmp]<-""
                         swNumbersOn<-false
                         color 8
                         api "box=7,10,12,30,D" 
                         api "box=13,10,20,30,D"
                         api "box=7,48,12,68,D" 
                         api "box=13,48,18,68,D" 
                         color 0
                         .pone_puntos(elt,9,29)
                         .pone_puntos(fuel,15,29)
                         .pone_puntos(ht,9,67)
                         .pone_puntos(vel,15,67)
                         if swEngineOn
                            at(18,13); color 95; write "ENGINE------HOT"
                            .ShowEngine(engine)
                         endif
                         
                         at(20,[pFallas tTmp]);color 8; write " "+[cFallas tTmp]+" "
                         tNumbersOn<-seconds("")
                      endif
                   endif
                endif
             rend
          next
          
          room ~swNumbersOn
             if timer(tNumbersOn,5000)   // 5 segundos
                swNumbersOn<-true
                cmd(PATHs+"lunar_device_on.wav </dev/null >/dev/null 2>&1 &")
                color 12
                api "box=7,10,12,30,D" 
                api "box=13,10,20,30,D"
                api "box=7,48,12,68,D" 
                api "box=13,48,18,68,D" 
                at 8, 11           //15 set up screen for parameter print
                color 95
                write "     Time (sec)    "
                at 14, 11
                color 95
                write "      Fuel (%)     "
                at 8, 49    // 53
                color 95
                write "    Height (mts)   "
                at 14, 49
                color 95
                write "   Velocity (m/s)  "
                if swEngineOn
                   at(18,13); color 95; write "ENGINE------HOT"
                   .ShowEngine(engine)
                endif
                at(20,[pFallas tTmp]);color 120; write " "+[cFallas tTmp]+" "
                
             endif
          rend
          
          room ~swEngineOn
             if timer(tEngineOn,5000)   // 5 segundos
                swEngineOn<-true
                cmd(PATHs+"lunar_device_on.wav </dev/null >/dev/null 2>&1 &")
                at(20,[pFallas tTmp]);color 120; write " "+[cFallas tTmp]+" "
                
                at(18,13); color 95; write "ENGINE------HOT"
                .ShowEngine(engine)
             endif
          rend
          
          room ~swLevelOn
             if timer(tLevelOn,5000)   // 5 segundos
                swLevelOn<-true
                cmd(PATHs+"lunar_device_on.wav </dev/null >/dev/null 2>&1 &")
                color 12;.circulo(13,39,7,1,"█")
                at(20,[pFallas tTmp]);color 120; write " "+[cFallas tTmp]+" "
             endif
          rend
          //
          room swIniMsg
             if timer(tIniMsg,9000)
                cmd(PATHs+"lunar_indicaciones.wav </dev/null >/dev/null 2>&1 &")
                PIDMENSAJE<- fcmd("pidof "+cPLAY)
                nPills<-strntok((flag " ") PIDMENSAJE)
                PIDMENSAJE<-strtok(PIDMENSAJE 1)
                not swIniMsg
             endif
          rend
          room swComFail
             if timer(tComFail,64000)
                cmd(PATHs+"lunar_cierre_comm.wav </dev/null >/dev/null 2>&1 &")
                .KILLPILLS(PIDMENSAJE)
                not swComFail
                at(17,2);color 8 ; write "  ON "
                at(18,2);color 12; write "  OFF "
                
             endif
          rend
          room swDanger
             if timer(timeDanger,10000)  // 10 seconds to explosion
                swExplota<-true
                MOTIVO<-1
                break
             endif
          rend
          room swTimeOvl
             if timer(timeOvl,1000)
                --ctaReset
                if ctaReset=0
                   swTimeOvl<-false
                   levelOvl<-10
                endif
             endif
          rend
          room swEngineInit
             cmd(PATHs+"lunar_engine.wav </dev/null >/dev/null 2>&1 &")
             PIDENGINE<- fcmd("pidof "+cPLAY)
             nPills<-strntok((flag " ") PIDENGINE)
             PIDENGINE<-strtok(PIDENGINE 1)
             swEngineInit<-false
          rend
      // chequear angulo de inclinación y lanzar una alarma por si se pone de cabeza.
          room swGas
             if c = 19             //level izq
                if ~swIzq
                   cntIzq<-(-mth.ceil(mth.rand(10)))
                   
                   swIzq<-true
                   cmd(PATHs+"lunar_gas_angulo.wav </dev/null >/dev/null 2>&1 &")
                   timeIzq<-seconds("")
                endif
             elseif c = 4              // level der
                if ~swDer
                   cntDer<-mth.ceil(mth.rand(10))
                   
                   swDer<-true
                   cmd(PATHs+"lunar_gas_angulo.wav </dev/null >/dev/null 2>&1 &")
                   timeDer<-seconds("")
                endif
             endif
             room swIzq
                if timer(timeIzq,250)
                   color 0
                   taguja<-aguja
                   .vdraw(taguja)
                   .rotacion(aguja 13 39 (-1))
                   --anguloF
                   color {(anguloF=0)?10:{(anguloF<=45 and anguloF>0)?15:{(anguloF<90 and anguloF>45)?6:12}}}
                   .vdraw(aguja),if swLevelOn
                   if anguloF<0
                      if ~swErr0
                      //    cmd(PATHs+"lunar_angulo_erroneo.wav </dev/null >/dev/null 2>&1 &")
                          swErr0<-true
                          cmd(PATHs+"lunar_alarma_general.wav </dev/null >/dev/null 2>&1 &")
                          PIDERR0<- fcmd("pidof "+cPLAY)
                          nPills<-strntok((flag " ") PIDERR0)
                          PIDERR0<-strtok(PIDERR0 1)
                      endif
                   endif
                   ++pGas
                   if pGas<100
                      at(9,70); color(15)
                      writmap(mapa coloresMap  pGas (pGas+9) 1 8 0)
                   else
                      // switch "E" on. Alarm CO2 empty
                      // push "E" --> alarm CO2 off & switch "R" on
                      {swE,swOnGas,swGas}<-{true,true,false}
                      cmd(PATHs+"lunar_alarma_co2.wav </dev/null >/dev/null 2>&1 &")
                      PIDCO2<- fcmd("pidof "+cPLAY)
                      nPills<-strntok((flag " ") PIDCO2)
                      PIDCO2<-strtok(PIDCO2 1)
                      at 20,70; color 79; write " E "
                      tGas<-seconds("")
                      --pGas
                   endif
   //                at(24,30);write anguloF

                   ++cntIzq
                   if cntIzq=0
                      swIzq<-false
                   endif
                endif
             rend
             //at(25,30); write swDanger
             room swDer
                if timer(timeDer,250)
                   color 0
                   taguja<-aguja
                   .vdraw(taguja)
                   .rotacion(aguja 13 39 1)
                   ++anguloF
      //             color {(anguloF=0)?10:{(anguloF<45)?14:12}}
                   color {(anguloF=0)?10:{(anguloF<=45 and anguloF>0)?15:{(anguloF<90 and anguloF>45)?6:12}}}
                   .vdraw(aguja),if swLevelOn
                   if anguloF>=90
                      if ~swErr90
                       //   cmd(PATHs+"lunar_angulo_erroneo.wav </dev/null >/dev/null 2>&1 &")
                          swErr90<-true
                          cmd(PATHs+"lunar_alarma_general.wav </dev/null >/dev/null 2>&1 &")
                          PIDERR90<- fcmd("pidof "+cPLAY)
                          nPills<-strntok((flag " ") PIDERR90)
                          PIDERR90<-strtok(PIDERR90 1)
                      endif
                   endif
                   ++pGas
                   if pGas<100
                      at(9,70); color(15)
                      writmap(mapa coloresMap pGas (pGas+9) 1 8 0)
                   else
                      // switch "E" on. Alarm CO2 empty
                      // push "E" --> alarm CO2 off & switch "R" on
                      {swE,swOnGas,swGas}<-{true,true,false}
                      cmd(PATHs+"lunar_alarma_co2.wav </dev/null >/dev/null 2>&1 &")
                      PIDCO2<- fcmd("pidof "+cPLAY)
                      nPills<-strntok((flag " ") PIDCO2)
                      PIDCO2<-strtok(PIDCO2 1)
                      at 20,70; color 79; write " E "
                      tGas<-seconds("")
                      --pGas
                   endif

   //                at(24,30);write anguloF
                   
                   --cntDer
                   if cntDer=0
                      swDer<-false
                   endif
                endif
             rend
          rend // swGas
          room swE
             if timer(tGas,400)
                color {swOnGas?79:112}
                not swOnGas
                at(20,70);write " E " 
             endif
             if c = 101   // "E"
                if strlen(PIDCO2)>0
                   .KILLPILLS(PIDCO2)
                   {swE,swR,swOnR}<-{false,true,true}
                   at(20,70);color 112;write " E "
                   at(20,75);color 47;write " R "
                   tGas<-seconds("")
                endif
             endif
          rend
          room swR
             if timer(tGas,400)
                color {swOnR?47:112}
                not swOnR
                at(20,75);write " R " 
             endif
             if c = 114   // "R"
                swR<-false
   //             pGas<-75    // 25% NL2 add.
                at(20,75);color 112;write " R "
                cmd(PATHs+"lunar_co2_reload.wav </dev/null >/dev/null 2>&1 &")
                {cntIzq,cntDer}<-0
                {swIzq,swDer}<-false
                swReload<-true
                tReload<-seconds("")
                // carga NL2 remanente. add a switch with a timer
             endif
          rend
          room swReload
             if timer(tReload,30)
                --pGas
                at(9,70); color(15)
                writmap(mapa coloresMap pGas (pGas+9) 1 8 0)
                if pGas=75
                   swReload<-false
                   swGas<-true
                endif
             endif
          rend
          room swErr90
             if anguloF<90
                if strlen(PIDERR90)>0
                   .KILLPILLS(PIDERR90)
                   PIDERR90<-""
                   swErr90<-false
                endif
             endif
          rend
          room swErr0
             if anguloF>=0
                if strlen(PIDERR0)>0
                   .KILLPILLS(PIDERR0)
                   PIDERR0<-""
                   swErr0<-false
                endif
             endif
          rend
       
           // define time error line 2 OXIGENO
          .ChequeaOxigeno(c)
          .ChequeaCO2(c)
          .ChequeaPOW(c)
          .ChequeaENGINE(c)
          .ChequeaNL2(c)
          /* RESET libre de swReset permite reseter la maquina libremente.
             Esto es bueno y malo: permite hacer trampa, resetear la maquina en los
             primeros niveles, y jugar sin problemas de fallas. Pero, en los niveles
             superiores, hacer un reset puede ser fatal, porque las distancias son
             mas cortas, y la nave sigue cayendo. 
             Usted, señor jugador, decide. */
          if c=122
             if swReset
                swReset<-false
                swOnReset<-false
             endif
             .PowOff()
          endif

       rend  // POWER
       
       // cada segundo cambia la velocidad
       room swOnCinta
          room timer(CINTA,1000)
   //          DIR<-30, if (++DIR)>30
//             if DIR=1
                if (++VELH)>30
                   VELH<-30
                   not swOnCinta
                   swAjusteCinta<-true
                endif
//             else
//                if (--VELH)<1
//                   VELH<-1
//                   not swOnCinta
//                   swAjusteCinta<-true
//                endif
//             
//             endif
          rend
          
   //       DIR<-ht
   //       DIR<-cteHT,if ht>cteHT
   //       if timer(velCinta, mth.sqrt ([tCinta DIR]) * 100 ) 
          if timer(velCinta, [tCinta VELH]) 
             if DIR=1
                .rota_cinta()
             else
                .rota_d_cinta()
             endif
             room POWER
                at(3,2);write pointMark
                at(4,2);write landMark
             rend
          endif
       rend
       room swAjusteCinta
          if engine>=5
             if anguloF<0
                DIR<-1
                VELH<-28
                swOnCinta<-true
                swAjusteCinta<-false
                CINTA<-seconds("")
             elseif anguloF>0
                DIR<-(-1)
                VELH<-28
                swOnCinta<-true
                swAjusteCinta<-false
                CINTA<-seconds("")
             endif
          endif
       rend
       
       oht<-ht; ovel<-vel;oelt<-elt;ofuel<-fuel
       .CalcParameters()
       
       // verifica altura versus angulo de inclinación
       room POWER
          if mth.ceil(ht) between 99 101
             if ~swAlarmProx
                cmd(PATHs+"lunar_alarma_aproximacion.wav </dev/null >/dev/null 2>&1 &")
                PIDPROXIMO<- fcmd("pidof "+cPLAY)
                nPills<-strntok((flag " ") PIDPROXIMO)
                
                PIDPROXIMO<-strtok(PIDPROXIMO 1)
                swAlarmProx<-true
   //             if  anguloF>5  // why not -5? because, module crash by innertia (vuelta carnerou)
   //                cmd(PATHs+"lunar_angulo_erroneo.wav </dev/null >/dev/null 2>&1 &")
   //             endif
             endif
          elseif ht>100
             if swAlarmProx
                if strlen(PIDPROXIMO)>0
                   .KILLPILLS(PIDPROXIMO)
                   PIDPROXIMO<-""
                endif
                swAlarmProx<-false
             endif
          endif     
          
          .Printparams(),if swNumbersOn            //print newly computed parameters
   //       msleep(50000)
//          msleep(10000)
          if swExplota
             break
          endif
       rend
       msleep(10000)
       room ~POWER   // cayó en falla de potencia. recuperar en 10 segundos
          if timer(tRecover,10000)
             cmd(PATHs+"lunar_device_on.wav </dev/null >/dev/null 2>&1 &")
             cmd(PATHs+"lunar_co2_reload.wav </dev/null >/dev/null 2>&1 &")
             .ShowHeader()
             color 15
             .vdraw(aguja)
             at(9,70); color(15)
             writmap(mapa coloresMap pGas (pGas+9) 1 8 0)
             for tTmp<-1 to 5
                [swFallas tTmp]<-false    // desactive error: all OK!!
             next
             POWER<-true
             swEngineOn<-true    // desactive error: all OK!!
             ENGPOWER<-true
             swDanger<-false
             swGas<-true
             levelOvl<-10
             .ShowEngine(engine)
             {swPOW,swENG,swOxigeno,swCO2,swNL2}<-false
             {swIniO,swOHard,swIniCO2,swCO2Hard,swIniPOW,swPOWHard}<-false
             {swReset,swOnReset}<-false
          endif
       rend
       
       if ht < 0  
          break         //stop if we have hit the surface
       endif
     else    // start != 0
       if timer(tAUTO,100)
          if swAUTO
             color 4
          else
             color 12
          endif
          not swAUTO
          at(13,2); write "  AUT  "
       endif
       if timer(velCinta,100) 
          .rota_cinta()
          at(3,2);write pointMark
          at(4,2);write landMark
       endif
     endif
   until c=27  // esto después desaparece para dar paso a un ciclo sin fin

   PIDPROXIMO<- fcmd("pidof "+cPLAY)
   if strlen(PIDPROXIMO)>0
      cmd("kill -9 "+PIDPROXIMO+" </dev/null >/dev/null 2>&1 &")
   endif

//   if strlen(PIDENGINE)>0
//      .KILLPILLS(PIDENGINE)
//   endif
//   if strlen(PIDPROXIMO)>0
//      .KILLPILLS(PIDPROXIMO)
//   endif
//   if strlen(PIDERR90)>0
//      .KILLPILLS(PIDERR90)
//   endif
//   if strlen(PIDERR0)>0
//      .KILLPILLS(PIDERR0)
//   endif
//   if strlen(PIDOVERLOAD)>0
//      .KILLPILLS(PIDOVERLOAD)
//   endif
//   for i<-1 to 5
//      if strlen([cPIDFAIL i])>0
//         .KILLPILLS([cPIDFAIL i])
//      endif
//   next
   
   // press escape? bye!
   if c=27
//   vel<-(-4)  // proof
//   ht<-0  // proof
//   anguloF<-(-10)  // proof
      bonoCinta<-0
      fuel<-0
      BONO<-0
      break
   endif
   
   // Compute Bonus LandMark
   bonoCinta<-1
   ZONA<-asc(strcpy(landMark,38,1))
//   at(24,10); write "ZONA=",ZONA,"; ",chr(ZONA)
//   pause
   if ZONA=176
        bonoCinta<-2
   elseif ZONA=177
        bonoCinta<-3
   elseif ZONA=178
        bonoCinta<-4
   elseif ZONA=219
        bonoCinta<-5
   endif
  
   if swExplota
      bonoCinta<-0
      fuel<-0
   endif      
   //vel<-(-3)  // proof
   //ht<-0  // proof
   //anguloF<-5  // proof
   //end of simulation - either from //ESC// or hit lunar surface
   BONO<-0
   if ht <= 0   //if hit lunar surface then print end messages
   
     if vel >= (-5.09) 
     
       if anguloF between( (-5), 5)   // landing OK!
          cls
     
          oht<-ht; ovel<-vel;oelt<-elt;ofuel<-fuel
          .ShowOff(10)
          sleep(2)
          .SoftLanding()
          BONO<-1000
          if anguloF=0
             BONO<-3000
          endif
       else    // uneven landing. Problem: loop never out cambiar msleep() por milisec()
          cmd(PATHs+"lunar_uneven_landing.wav </dev/null >/dev/null 2>&1 &")
          sleep(1)
          .ShowOff(8)
          sleep(1)
          .ShowOff(6)
          cmd(PATHs+"lunar_despresurizacion.wav </dev/null >/dev/null 2>&1")
          .UnevenLanding()
          
          if anguloF between 5 10
             BONO<-250   // por lo menos, no hizo mierda la nave
          endif
          bonoCinta<-0
       endif
       
     elseif vel>=(-15) and vel<=(-5.1)
       cmd(PATHs+"lunar_golpe_hard.wav </dev/null >/dev/null 2>&1 &")
       
       
       .ShowOff(6)
       .ExplotaChico(0)  
       .ShowOff(8) 
       cmd(PATHs+"lunar_despresurizacion.wav </dev/null >/dev/null 2>&1")
       
       .HardLanding()
       bonoCinta<-0
//       BONO<-100   // por lo menos, no hizo mierda la nave
     else
       .ExplotaGrande()
       bonoCinta<-0
       fuel<-0
       BONO<-0
       MOTIVO<-3    // se pasa de la vvelocidad
       break    // go home
     endif
   elseif swExplota
     .ExplotaGrande()
     bonoCinta<-0
     fuel<-0
     BONO<-0
     
     break     // go home
   endif
   sleep(1)
   cls
   .ShowScore(1)
   cls   
   ++index
   if index>7
      index<-7
   endif
wend     /// main loop
cls

.ShowScore(0)
cls
if MOTIVO
   color 15
      .pone_msg("CRASH LANDING INVESTIGATION",5,26,true)
      .pone_msg("---------------------------",6,26,true)
      .pone_msg("RESULTS:",8,26,true)
   color 12
   if MOTIVO=1
      .pone_msg("  ENGINE OVERLOAD - FATAL",10,26,true)
   elseif MOTIVO=2
      .pone_msg("GENERAL SYSTEM FAIL - FATAL",10,26,true)
   elseif MOTIVO=3
      .pone_msg("HIGH SPEED LANDING - FATAL",10,26,true)
   endif
   sleep(2)
   
endif
if ~.otravez()
   break
endif
cls
wend
.game_over()

//cls
stop
